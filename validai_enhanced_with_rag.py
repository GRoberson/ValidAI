#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ ValidAI Enhanced com Sistema RAG Avan√ßado

Vers√£o completa do ValidAI Enhanced integrando o novo sistema RAG
baseado em Vertex AI nativo, substituindo o RAG original.
"""

import os
import sys
import warnings
import logging
import gradio as gr
from typing import Dict, Any, Optional, Tuple, List
from pathlib import Path

# Suprimir warnings
warnings.filterwarnings("ignore", message="The 'tuples' format for chatbot messages is deprecated")

# Imports do ValidAI Enhanced original
from validai_enhanced import (
    ConfigValidAI, GerenciadorConfig, ValidadorArquivos, 
    FeedbackManager, ValidAIEnhanced
)

# Import do novo sistema RAG
from validai_rag_system import ValidAIRAGManager, ValidAIRAGInterface, criar_configuracao_rag_padrao

logger = logging.getLogger(__name__)


class ValidAIEnhancedWithRAG(ValidAIEnhanced):
    """
    üöÄ ValidAI Enhanced com Sistema RAG Avan√ßado
    
    Extens√£o do ValidAI Enhanced que integra o novo sistema RAG
    baseado em Vertex AI nativo.
    """
    
    def __init__(self, arquivo_config: Optional[str] = None):
        """
        Inicializa ValidAI Enhanced com RAG avan√ßado
        
        Args:
            arquivo_config: Caminho para arquivo de configura√ß√£o
        """
        # Inicializar ValidAI Enhanced base
        super().__init__(arquivo_config)
        
        # Inicializar sistema RAG avan√ßado
        self._inicializar_rag_avancado()
        
        logger.info("üöÄ ValidAI Enhanced com RAG Avan√ßado inicializado!")
    
    def _inicializar_rag_avancado(self) -> None:
        """Inicializa o sistema RAG avan√ßado"""
        try:
            logger.info("üìö Inicializando sistema RAG avan√ßado...")
            
            # Criar configura√ß√£o RAG baseada na config principal
            config_rag = criar_configuracao_rag_padrao()
            config_rag.update({
                'project_id': self.config.project_id,
                'location': self.config.location,
                'bucket_name': getattr(self.config, 'rag_bucket_name', 'validai-rag-bucket')
            })
            
            # Inicializar gerenciador RAG
            self.rag_manager = ValidAIRAGManager(config_rag)
            
            # Criar interface RAG
            self.rag_interface = ValidAIRAGInterface(self.rag_manager)
            
            logger.info("‚úÖ Sistema RAG avan√ßado inicializado")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar RAG: {e}")
            # Continuar sem RAG se houver erro
            self.rag_manager = None
            self.rag_interface = None
    
    def _criar_aba_rag_avancada(self) -> gr.Column:
        """
        Cria a aba RAG avan√ßada substituindo a original
        
        Returns:
            Componente Gradio da aba RAG
        """
        with gr.Column() as aba_rag:
            # Cabe√ßalho
            gr.HTML("""
            <div style="text-align: center; margin-bottom: 20px;">
                <h3>üìö Sistema RAG Avan√ßado</h3>
                <p>Base de conhecimento inteligente com Vertex AI nativo</p>
            </div>
            """)
            
            if not self.rag_manager:
                # Mostrar erro se RAG n√£o foi inicializado
                gr.HTML("""
                <div style="background: #ffebee; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h4>‚ùå Sistema RAG Indispon√≠vel</h4>
                    <p>O sistema RAG avan√ßado n√£o p√¥de ser inicializado. Verifique:</p>
                    <ul>
                        <li>Configura√ß√µes do Google Cloud</li>
                        <li>Permiss√µes do Vertex AI</li>
                        <li>Conectividade com a internet</li>
                    </ul>
                </div>
                """)
                return aba_rag
            
            # Painel de controle do RAG
            with gr.Accordion("üéõÔ∏è Painel de Controle RAG", open=True):
                with gr.Row():
                    with gr.Column(scale=2):
                        # Seletor de corpus
                        opcoes_corpus = self.rag_interface.obter_opcoes_corpus()
                        corpus_dropdown = gr.Dropdown(
                            choices=opcoes_corpus,
                            label="üìö Selecionar Base de Conhecimento",
                            info="Escolha a base mais adequada para sua consulta",
                            elem_id="rag_corpus_selector"
                        )
                    
                    with gr.Column(scale=1):
                        # Bot√µes de a√ß√£o
                        refresh_btn = gr.Button("üîÑ Atualizar", size="sm")
                        setup_btn = gr.Button("‚öôÔ∏è Configurar Corpus", size="sm")
                
                # Status do corpus selecionado
                corpus_status = gr.HTML(
                    value=self.feedback.info("Selecione uma base de conhecimento para come√ßar"),
                    elem_id="corpus_status"
                )
            
            # √Årea de configura√ß√£o de corpus (inicialmente oculta)
            with gr.Accordion("‚öôÔ∏è Configura√ß√£o de Corpus", open=False, visible=False) as config_accordion:
                with gr.Row():
                    with gr.Column():
                        gr.Markdown("### üì§ Preparar Corpus")
                        
                        corpus_info_display = gr.JSON(
                            label="Informa√ß√µes do Corpus",
                            value={}
                        )
                        
                        with gr.Row():
                            upload_files_btn = gr.Button("üì§ Enviar Arquivos", variant="primary")
                            create_corpus_btn = gr.Button("üß† Criar Corpus", variant="secondary")
                            process_files_btn = gr.Button("üìö Processar", variant="secondary")
                        
                        setup_status = gr.HTML(
                            value="",
                            elem_id="setup_status"
                        )
            
            # Interface de chat RAG
            with gr.Row():
                with gr.Column():
                    # Chatbot RAG
                    chatbot_rag = gr.Chatbot(
                        label="üí¨ Consultas RAG",
                        height="400px",
                        show_copy_button=True,
                        avatar_images=[None, self.componentes_originais['logo_img']]
                    )
                    
                    # Input de mensagem
                    with gr.Row():
                        msg_input = gr.Textbox(
                            label="",
                            placeholder="Fa√ßa sua pergunta sobre a base de conhecimento selecionada...",
                            scale=4
                        )
                        send_btn = gr.Button("üì§ Enviar", scale=1, variant="primary")
                    
                    # Bot√µes de a√ß√£o
                    with gr.Row():
                        clear_chat_btn = gr.Button("üóëÔ∏è Limpar Chat", size="sm")
                        export_chat_btn = gr.Button("üìÑ Exportar", size="sm")
            
            # Painel de estat√≠sticas
            with gr.Accordion("üìä Estat√≠sticas e Status", open=False):
                stats_display = gr.HTML(
                    value=self._gerar_estatisticas_rag(),
                    elem_id="rag_stats"
                )
                
                update_stats_btn = gr.Button("üîÑ Atualizar Estat√≠sticas")
            
            # Estados para o RAG
            corpus_selecionado_state = gr.State(None)
            chat_history_state = gr.State([])
            
            # Conectar eventos
            self._conectar_eventos_rag(
                corpus_dropdown, corpus_status, corpus_selecionado_state,
                config_accordion, corpus_info_display, setup_status,
                upload_files_btn, create_corpus_btn, process_files_btn,
                chatbot_rag, msg_input, send_btn, chat_history_state,
                clear_chat_btn, export_chat_btn, stats_display,
                refresh_btn, setup_btn, update_stats_btn
            )
        
        return aba_rag
    
    def _conectar_eventos_rag(self, *components):
        """Conecta todos os eventos da interface RAG"""
        (corpus_dropdown, corpus_status, corpus_selecionado_state,
         config_accordion, corpus_info_display, setup_status,
         upload_files_btn, create_corpus_btn, process_files_btn,
         chatbot_rag, msg_input, send_btn, chat_history_state,
         clear_chat_btn, export_chat_btn, stats_display,
         refresh_btn, setup_btn, update_stats_btn) = components
        
        # Sele√ß√£o de corpus
        corpus_dropdown.change(
            fn=self._on_corpus_change,
            inputs=[corpus_dropdown],
            outputs=[corpus_status, corpus_selecionado_state, corpus_info_display]
        )
        
        # Mostrar/ocultar configura√ß√£o
        setup_btn.click(
            fn=lambda: gr.Accordion(visible=True, open=True),
            outputs=config_accordion
        )
        
        # Atualizar op√ß√µes
        refresh_btn.click(
            fn=self._refresh_corpus_options,
            outputs=[corpus_dropdown, stats_display]
        )
        
        # Configura√ß√£o de corpus
        upload_files_btn.click(
            fn=self._upload_corpus_files,
            inputs=[corpus_selecionado_state],
            outputs=[setup_status]
        )
        
        create_corpus_btn.click(
            fn=self._create_corpus,
            inputs=[corpus_selecionado_state],
            outputs=[setup_status]
        )
        
        process_files_btn.click(
            fn=self._process_corpus_files,
            inputs=[corpus_selecionado_state],
            outputs=[setup_status]
        )
        
        # Chat
        send_btn.click(
            fn=self._process_rag_message,
            inputs=[msg_input, chat_history_state, corpus_selecionado_state],
            outputs=[chatbot_rag, msg_input, chat_history_state]
        )
        
        msg_input.submit(
            fn=self._process_rag_message,
            inputs=[msg_input, chat_history_state, corpus_selecionado_state],
            outputs=[chatbot_rag, msg_input, chat_history_state]
        )
        
        # Limpar chat
        clear_chat_btn.click(
            fn=lambda: ([], []),
            outputs=[chatbot_rag, chat_history_state]
        )
        
        # Atualizar estat√≠sticas
        update_stats_btn.click(
            fn=self._gerar_estatisticas_rag,
            outputs=stats_display
        )
    
    def _on_corpus_change(self, corpus_id: str) -> Tuple[str, str, Dict]:
        """Manipula mudan√ßa de corpus selecionado"""
        if not corpus_id or not self.rag_interface:
            return (
                self.feedback.aviso("Nenhum corpus selecionado"),
                None,
                {}
            )
        
        try:
            # Selecionar corpus
            status_msg = self.rag_interface.selecionar_corpus(corpus_id)
            
            # Obter informa√ß√µes do corpus
            info = self.rag_manager.obter_estatisticas_corpus(corpus_id)
            
            return status_msg, corpus_id, info
            
        except Exception as e:
            return (
                self.feedback.erro(f"Erro ao selecionar corpus: {e}"),
                None,
                {}
            )
    
    def _refresh_corpus_options(self) -> Tuple[gr.Dropdown, str]:
        """Atualiza op√ß√µes de corpus dispon√≠veis"""
        if not self.rag_interface:
            return gr.Dropdown(choices=[]), "‚ùå Sistema RAG indispon√≠vel"
        
        try:
            opcoes = self.rag_interface.obter_opcoes_corpus()
            stats = self._gerar_estatisticas_rag()
            
            return (
                gr.Dropdown(choices=opcoes),
                stats
            )
            
        except Exception as e:
            return (
                gr.Dropdown(choices=[]),
                f"‚ùå Erro ao atualizar: {e}"
            )
    
    def _upload_corpus_files(self, corpus_id: str) -> str:
        """Faz upload dos arquivos de um corpus"""
        if not corpus_id or not self.rag_manager:
            return self.feedback.erro("Nenhum corpus selecionado")
        
        try:
            enviados, ignorados = self.rag_manager.enviar_arquivos_corpus(corpus_id)
            
            if enviados > 0:
                return self.feedback.sucesso(
                    f"Upload conclu√≠do: {enviados} arquivos enviados, {ignorados} ignorados"
                )
            else:
                return self.feedback.aviso("Nenhum arquivo foi enviado. Verifique o diret√≥rio.")
                
        except Exception as e:
            return self.feedback.erro(f"Erro no upload: {e}")
    
    def _create_corpus(self, corpus_id: str) -> str:
        """Cria um corpus no Vertex AI"""
        if not corpus_id or not self.rag_manager:
            return self.feedback.erro("Nenhum corpus selecionado")
        
        try:
            corpus_name = self.rag_manager.criar_corpus_rag(corpus_id)
            return self.feedback.sucesso(f"Corpus criado: {corpus_name}")
            
        except Exception as e:
            return self.feedback.erro(f"Erro ao criar corpus: {e}")
    
    def _process_corpus_files(self, corpus_id: str) -> str:
        """Processa arquivos de um corpus"""
        if not corpus_id or not self.rag_manager:
            return self.feedback.erro("Nenhum corpus selecionado")
        
        try:
            self.rag_manager.processar_arquivos_corpus(corpus_id)
            
            # Criar ferramenta de busca
            self.rag_manager.criar_ferramenta_busca(corpus_id)
            
            return self.feedback.sucesso(
                "Processamento iniciado! Aguarde alguns minutos para conclus√£o."
            )
            
        except Exception as e:
            return self.feedback.erro(f"Erro no processamento: {e}")
    
    def _process_rag_message(self, message: str, history: List, corpus_id: str) -> Tuple[List, str, List]:
        """Processa mensagem do chat RAG"""
        if not message.strip():
            return history, "", history
        
        if not corpus_id or not self.rag_interface:
            error_msg = "‚ö†Ô∏è Selecione um corpus antes de fazer perguntas"
            history.append([message, error_msg])
            return history, "", history
        
        try:
            # Processar consulta
            resposta = self.rag_interface.processar_consulta(message)
            
            # Adicionar ao hist√≥rico
            history.append([message, resposta])
            
            return history, "", history
            
        except Exception as e:
            error_msg = f"‚ùå Erro na consulta: {e}"
            history.append([message, error_msg])
            return history, "", history
    
    def _gerar_estatisticas_rag(self) -> str:
        """Gera estat√≠sticas do sistema RAG"""
        if not self.rag_manager:
            return "‚ùå Sistema RAG indispon√≠vel"
        
        try:
            corpus_info = self.rag_manager.listar_corpus_disponiveis()
            
            html = """
            <div style="background: #f5f5f5; padding: 15px; border-radius: 8px;">
                <h4>üìä Status dos Corpus RAG</h4>
                <table style="width: 100%; border-collapse: collapse;">
                    <tr style="background: #e0e0e0;">
                        <th style="padding: 8px; text-align: left;">Corpus</th>
                        <th style="padding: 8px; text-align: center;">Arquivos</th>
                        <th style="padding: 8px; text-align: center;">Status</th>
                    </tr>
            """
            
            for info in corpus_info:
                status_icon = "‚úÖ" if info['corpus_criado'] else "‚ö†Ô∏è"
                arquivos_text = "N/A" if not info['tem_arquivos'] else "Dispon√≠vel"
                
                html += f"""
                    <tr>
                        <td style="padding: 8px;">{info['nome']}</td>
                        <td style="padding: 8px; text-align: center;">{arquivos_text}</td>
                        <td style="padding: 8px; text-align: center;">{status_icon}</td>
                    </tr>
                """
            
            html += """
                </table>
            </div>
            """
            
            return html
            
        except Exception as e:
            return f"‚ùå Erro ao gerar estat√≠sticas: {e}"
    
    def criar_interface_aprimorada(self) -> gr.Blocks:
        """
        Cria interface com RAG avan√ßado integrado
        
        Returns:
            Interface Gradio completa
        """
        logger.info("üé® Criando interface com RAG avan√ßado...")
        
        # Criar chatbots
        chatbot = gr.Chatbot(
            avatar_images=[None, self.componentes_originais['logo_img']],
            type='tuples',
            height="55vh",
            elem_id="espaco_chat",
            label=self.config.nome_exibicao,
            show_copy_button=True,
            show_share_button=False
        )
        
        multimodal_text = gr.MultimodalTextbox(
            file_count='multiple',
            placeholder="Digite sua mensagem ou arraste arquivos aqui... üìé"
        )
        
        # Interface principal
        with gr.Blocks(
            title="ValidAI Enhanced - Sistema Completo de Valida√ß√£o",
            theme=self.componentes_originais['theme'],
            css=self.componentes_originais['css_interface'],
            fill_height=True,
            fill_width=True
        ) as interface:
            
            # Cabe√ßalho
            with gr.Row():
                gr.HTML(f"""
                <div style="text-align: center; padding: 20px;">
                    <h1>üöÄ ValidAI Enhanced + RAG Avan√ßado</h1>
                    <p style="color: #666;">Sistema Completo de Valida√ß√£o de Modelos ML</p>
                    <p style="font-size: 0.9em; color: #888;">
                        Modelo: {self.config.modelo_versao} | 
                        RAG: Vertex AI Nativo | 
                        Temperatura: {self.config.temperatura}
                    </p>
                </div>
                """)
            
            # Estados da aplica√ß√£o
            lista_abas = gr.State(None)
            block_chat = gr.State(0)
            arquivo_excel = gr.State("")
            chat = gr.State(None)
            historico_compare = gr.State("")
            
            # Abas principais
            with gr.Tab("üí¨ ValidAI Chat"):
                self._criar_aba_chat(chatbot, multimodal_text, lista_abas, block_chat, arquivo_excel, chat)
            
            with gr.Tab("üîç Pr√©-Validador"):
                self._criar_aba_pre_validador(historico_compare)
            
            with gr.Tab("üìö RAG Avan√ßado"):
                self._criar_aba_rag_avancada()
            
            with gr.Tab("‚öôÔ∏è Configura√ß√µes"):
                self._criar_aba_configuracoes()
            
            with gr.Tab("‚ÑπÔ∏è Informa√ß√µes"):
                self._criar_aba_informacoes_completa()
        
        logger.info("‚úÖ Interface com RAG avan√ßado criada!")
        return interface
    
    def _criar_aba_informacoes_completa(self):
        """Cria aba de informa√ß√µes incluindo RAG avan√ßado"""
        with gr.Column():
            gr.HTML("""
            <div style="text-align: center; margin-bottom: 30px;">
                <h2>üöÄ ValidAI Enhanced + RAG Avan√ßado</h2>
                <p style="font-size: 1.2em; color: #666;">Sistema Completo de Valida√ß√£o de Modelos ML</p>
            </div>
            """)
            
            with gr.Accordion("üÜï Novidades do RAG Avan√ßado", open=True):
                gr.Markdown(f"""
                ### üéØ **Sistema RAG Revolucion√°rio**
                - **Vertex AI Nativo**: Tecnologia de ponta do Google Cloud
                - **M√∫ltiplos Corpus**: Bases de conhecimento especializadas
                - **Processamento Inteligente**: Chunking otimizado e embeddings avan√ßados
                - **Consultas Contextuais**: Respostas baseadas em documentos espec√≠ficos
                
                ### üìö **Bases de Conhecimento Dispon√≠veis**
                - **Instru√ß√µes Normativas**: INs 706, 1253, 1146
                - **Valida√ß√µes de Mercado**: Relat√≥rios especializados
                - **Valida√ß√µes de Cr√©dito**: Documenta√ß√£o t√©cnica
                - **Metodologias**: Frameworks e boas pr√°ticas
                - **Casos de Uso**: Exemplos pr√°ticos
                
                ### üîß **Configura√ß√£o Atual**
                - **Projeto**: {self.config.project_id}
                - **Localiza√ß√£o**: {self.config.location}
                - **Modelo IA**: {self.config.modelo_versao}
                - **Embedding**: text-embedding-005
                """)
            
            # Incluir informa√ß√µes originais
            with gr.Accordion("üìã Informa√ß√µes Gerais", open=False):
                gr.Markdown(self.componentes_originais['informacoes'])


def main():
    """Fun√ß√£o principal do ValidAI Enhanced com RAG"""
    print("\n" + "="*80)
    print("üöÄ ValidAI Enhanced + RAG Avan√ßado")
    print("="*80)
    print("\nSistema completo com RAG baseado em Vertex AI nativo! üéâ\n")
    
    try:
        # Verificar argumentos
        debug = '--debug' in sys.argv
        share = '--share' in sys.argv
        
        # Inicializar aplica√ß√£o
        app = ValidAIEnhancedWithRAG()
        
        # Executar
        app.executar(share=share, debug=debug)
        
    except Exception as e:
        logger.error(f"üí• Erro fatal: {e}")
        logger.info("\nüîß Dicas para resolver:")
        logger.info("   ‚Ä¢ Verifique configura√ß√µes do Google Cloud")
        logger.info("   ‚Ä¢ Confirme permiss√µes do Vertex AI")
        logger.info("   ‚Ä¢ Execute com --debug para mais detalhes")
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())