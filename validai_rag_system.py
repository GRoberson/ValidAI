#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìö ValidAI RAG System - Sistema RAG Avan√ßado para Documentos

Sistema RAG dedicado para documentos de valida√ß√£o de modelos, usando
Vertex AI RAG nativo do Google Cloud. Substitui o RAG original do ValidAI
com tecnologia mais avan√ßada e flex√≠vel.
"""

import os
import uuid
import json
import logging
from pathlib import Path
from typing import List, Dict, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime

# Google Cloud imports
from google import genai
from google.cloud import storage
from google.genai.types import GenerateContentConfig, Retrieval, Tool, VertexRagStore
import vertexai
from vertexai import rag

logger = logging.getLogger(__name__)


@dataclass
class RAGCorpusConfig:
    """
    üìã Configura√ß√£o de um corpus RAG
    """
    nome: str
    descricao: str
    diretorio_local: str
    bucket_path: str
    tipos_arquivo: List[str]
    ativo: bool = True
    corpus_id: Optional[str] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Converte a configura√ß√£o do corpus RAG para dicion√°rio
        
        Returns:
            Dicion√°rio com todas as configura√ß√µes do corpus
        """
        return {
            'nome': self.nome,
            'descricao': self.descricao,
            'diretorio_local': self.diretorio_local,
            'bucket_path': self.bucket_path,
            'tipos_arquivo': self.tipos_arquivo,
            'ativo': self.ativo,
            'corpus_id': self.corpus_id
        }


class ValidAIRAGManager:
    """
    üß† Gerenciador RAG Avan√ßado para ValidAI
    
    Sistema completo para criar, gerenciar e consultar m√∫ltiplas bases
    de conhecimento usando Vertex AI RAG nativo.
    """
    
    def __init__(self, config: Dict[str, Any]):
        """
        Inicializa o gerenciador RAG
        
        Args:
            config: Configura√ß√µes do sistema
        """
        self.config = config
        self.corpus_configs: Dict[str, RAGCorpusConfig] = {}
        self.corpus_ativos: Dict[str, Any] = {}
        self.ferramentas_busca: Dict[str, Tool] = {}
        
        # Inicializar Google Cloud
        self._inicializar_google_cloud()
        
        # Carregar configura√ß√µes de corpus
        self._carregar_configuracoes_corpus()
        
        logger.info("‚úÖ ValidAI RAG Manager inicializado")
    
    def _inicializar_google_cloud(self) -> None:
        """Inicializa conex√µes com Google Cloud"""
        try:
            logger.info("üîó Conectando com Google Cloud...")
            
            vertexai.init(
                project=self.config['project_id'],
                location=self.config['location']
            )
            
            self.cliente_ia = genai.Client(
                vertexai=True,
                project=self.config['project_id'],
                location=self.config['location']
            )
            
            self.cliente_storage = storage.Client(
                project=self.config['project_id']
            )
            
            logger.info("‚úÖ Conectado ao Google Cloud")
            
        except Exception as e:
            raise RuntimeError(f"‚ùå Erro na conex√£o Google Cloud: {e}")
    
    def _carregar_configuracoes_corpus(self) -> None:
        """Carrega configura√ß√µes dos corpus dispon√≠veis"""
        logger.info("üìã Carregando configura√ß√µes de corpus...")
        
        # Configura√ß√µes padr√£o dos corpus do ValidAI
        corpus_padrao = {
            'instrucoes_normativas': RAGCorpusConfig(
                nome="Instru√ß√µes Normativas",
                descricao="INs 706, 1253 e 1146 sobre valida√ß√£o de modelos",
                diretorio_local="base_conhecimento/ins",
                bucket_path="validai-rag/ins",
                tipos_arquivo=[".pdf", ".txt", ".md"]
            ),
            'validacoes_mercado': RAGCorpusConfig(
                nome="Valida√ß√µes de Risco de Mercado",
                descricao="Relat√≥rios e documentos de valida√ß√£o de modelos de mercado",
                diretorio_local="base_conhecimento/mercado",
                bucket_path="validai-rag/mercado",
                tipos_arquivo=[".pdf", ".txt", ".md", ".docx"]
            ),
            'validacoes_credito': RAGCorpusConfig(
                nome="Valida√ß√µes de Risco de Cr√©dito",
                descricao="Relat√≥rios e documentos de valida√ß√£o de modelos de cr√©dito",
                diretorio_local="base_conhecimento/credito",
                bucket_path="validai-rag/credito",
                tipos_arquivo=[".pdf", ".txt", ".md", ".docx"]
            ),
            'metodologias_gerais': RAGCorpusConfig(
                nome="Metodologias e Frameworks",
                descricao="Documentos sobre metodologias de valida√ß√£o e frameworks",
                diretorio_local="base_conhecimento/metodologias",
                bucket_path="validai-rag/metodologias",
                tipos_arquivo=[".pdf", ".txt", ".md"]
            ),
            'casos_uso': RAGCorpusConfig(
                nome="Casos de Uso e Exemplos",
                descricao="Exemplos pr√°ticos e casos de uso de valida√ß√£o",
                diretorio_local="base_conhecimento/casos_uso",
                bucket_path="validai-rag/casos_uso",
                tipos_arquivo=[".pdf", ".txt", ".md", ".ipynb"]
            )
        }
        
        # Carregar configura√ß√µes personalizadas se existirem
        config_file = self.config.get('corpus_config_file', 'rag_corpus_config.json')
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    config_data = json.load(f)
                
                for nome, data in config_data.items():
                    corpus_padrao[nome] = RAGCorpusConfig(**data)
                
                logger.info(f"‚úÖ Configura√ß√µes carregadas de {config_file}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao carregar config: {e}")
        
        self.corpus_configs = corpus_padrao
        logger.info(f"üìã {len(self.corpus_configs)} corpus configurados")
    
    def listar_corpus_disponiveis(self) -> List[Dict[str, Any]]:
        """
        Lista todos os corpus dispon√≠veis
        
        Returns:
            Lista com informa√ß√µes dos corpus
        """
        corpus_info = []
        
        for nome, config in self.corpus_configs.items():
            info = {
                'id': nome,
                'nome': config.nome,
                'descricao': config.descricao,
                'ativo': config.ativo,
                'tem_arquivos': os.path.exists(config.diretorio_local),
                'corpus_criado': config.corpus_id is not None
            }
            corpus_info.append(info)
        
        return corpus_info
    
    def verificar_arquivos_corpus(self, corpus_id: str) -> Dict[str, Any]:
        """
        Verifica arquivos dispon√≠veis para um corpus
        
        Args:
            corpus_id: ID do corpus
            
        Returns:
            Informa√ß√µes sobre os arquivos
        """
        if corpus_id not in self.corpus_configs:
            raise ValueError(f"Corpus n√£o encontrado: {corpus_id}")
        
        config = self.corpus_configs[corpus_id]
        diretorio = Path(config.diretorio_local)
        
        if not diretorio.exists():
            return {
                'total_arquivos': 0,
                'arquivos_validos': 0,
                'tamanho_total_mb': 0,
                'tipos_encontrados': [],
                'status': 'diretorio_nao_existe'
            }
        
        arquivos_validos = []
        tamanho_total = 0
        tipos_encontrados = set()
        
        for arquivo in diretorio.rglob('*'):
            if arquivo.is_file():
                extensao = arquivo.suffix.lower()
                if extensao in config.tipos_arquivo:
                    arquivos_validos.append(str(arquivo))
                    tamanho_total += arquivo.stat().st_size
                    tipos_encontrados.add(extensao)
        
        return {
            'total_arquivos': len(list(diretorio.rglob('*'))),
            'arquivos_validos': len(arquivos_validos),
            'tamanho_total_mb': tamanho_total / (1024 * 1024),
            'tipos_encontrados': list(tipos_encontrados),
            'arquivos': arquivos_validos[:10],  # Primeiros 10 para preview
            'status': 'ok' if arquivos_validos else 'sem_arquivos_validos'
        }
    
    def enviar_arquivos_corpus(self, corpus_id: str) -> Tuple[int, int]:
        """
        Envia arquivos de um corpus para o Google Cloud Storage
        
        Args:
            corpus_id: ID do corpus
            
        Returns:
            (arquivos_enviados, arquivos_ignorados)
        """
        if corpus_id not in self.corpus_configs:
            raise ValueError(f"Corpus n√£o encontrado: {corpus_id}")
        
        config = self.corpus_configs[corpus_id]
        logger.info(f"üì§ Enviando arquivos do corpus: {config.nome}")
        
        # Verificar bucket
        bucket_name = self.config['bucket_name']
        try:
            bucket = self.cliente_storage.get_bucket(bucket_name)
        except Exception as e:
            raise RuntimeError(f"‚ùå Erro ao acessar bucket {bucket_name}: {e}")
        
        # Processar arquivos
        diretorio = Path(config.diretorio_local)
        if not diretorio.exists():
            raise ValueError(f"Diret√≥rio n√£o existe: {diretorio}")
        
        enviados = 0
        ignorados = 0
        tamanho_max_mb = self.config.get('tamanho_max_arquivo_mb', 50)
        
        for arquivo in diretorio.rglob('*'):
            if arquivo.is_file():
                extensao = arquivo.suffix.lower()
                
                if extensao not in config.tipos_arquivo:
                    ignorados += 1
                    continue
                
                # Verificar tamanho
                tamanho_mb = arquivo.stat().st_size / (1024 * 1024)
                if tamanho_mb > tamanho_max_mb:
                    logger.warning(f"‚è≠Ô∏è Arquivo muito grande: {arquivo.name} ({tamanho_mb:.1f}MB)")
                    ignorados += 1
                    continue
                
                try:
                    # Criar caminho no bucket
                    caminho_relativo = arquivo.relative_to(diretorio)
                    nome_no_bucket = f"{config.bucket_path}/{caminho_relativo}".replace("\\", "/")
                    
                    # Enviar arquivo
                    blob = bucket.blob(nome_no_bucket)
                    blob.upload_from_filename(str(arquivo))
                    enviados += 1
                    
                    if enviados % 10 == 0:
                        logger.info(f"üì§ Enviados {enviados} arquivos...")
                
                except Exception as e:
                    logger.error(f"‚ùå Erro ao enviar {arquivo.name}: {e}")
                    ignorados += 1
        
        logger.info(f"‚úÖ Corpus {config.nome}: {enviados} enviados, {ignorados} ignorados")
        return enviados, ignorados
    
    def criar_corpus_rag(self, corpus_id: str) -> str:
        """
        Cria um corpus RAG no Vertex AI
        
        Args:
            corpus_id: ID do corpus
            
        Returns:
            ID do corpus criado
        """
        if corpus_id not in self.corpus_configs:
            raise ValueError(f"Corpus n√£o encontrado: {corpus_id}")
        
        config = self.corpus_configs[corpus_id]
        logger.info(f"üß† Criando corpus RAG: {config.nome}")
        
        try:
            # Gerar nome √∫nico
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nome_corpus = f"validai_{corpus_id}_{timestamp}"
            
            # Criar corpus
            corpus_rag = rag.create_corpus(
                display_name=nome_corpus,
                description=f"{config.descricao} - Criado em {datetime.now().isoformat()}",
                backend_config=rag.RagVectorDbConfig(
                    rag_embedding_model_config=rag.RagEmbeddingModelConfig(
                        vertex_prediction_endpoint=rag.VertexPredictionEndpoint(
                            publisher_model=self.config.get(
                                'modelo_embedding', 
                                'publishers/google/models/text-embedding-005'
                            )
                        )
                    )
                )
            )
            
            # Armazenar refer√™ncia
            self.corpus_ativos[corpus_id] = corpus_rag
            config.corpus_id = corpus_rag.name
            
            logger.info(f"‚úÖ Corpus criado: {nome_corpus}")
            return corpus_rag.name
            
        except Exception as e:
            raise RuntimeError(f"‚ùå Erro ao criar corpus: {e}")
    
    def processar_arquivos_corpus(self, corpus_id: str) -> None:
        """
        Processa arquivos de um corpus no Vertex AI RAG
        
        Args:
            corpus_id: ID do corpus
        """
        if corpus_id not in self.corpus_configs:
            raise ValueError(f"Corpus n√£o encontrado: {corpus_id}")
        
        if corpus_id not in self.corpus_ativos:
            raise ValueError(f"Corpus n√£o foi criado ainda: {corpus_id}")
        
        config = self.corpus_configs[corpus_id]
        corpus_rag = self.corpus_ativos[corpus_id]
        
        logger.info(f"üìö Processando arquivos do corpus: {config.nome}")
        
        try:
            # Montar caminho GCS
            bucket_uri = f"gs://{self.config['bucket_name']}"
            caminho_importacao = f"{bucket_uri}/{config.bucket_path}/"
            
            logger.info(f"üìÇ Importando de: {caminho_importacao}")
            
            # Configurar processamento
            chunk_size = self.config.get('chunk_size', 1024)
            chunk_overlap = self.config.get('chunk_overlap', 256)
            
            # Iniciar importa√ß√£o
            resposta_importacao = rag.import_files(
                corpus_name=corpus_rag.name,
                paths=[caminho_importacao],
                transformation_config=rag.TransformationConfig(
                    chunking_config=rag.ChunkingConfig(
                        chunk_size=chunk_size,
                        chunk_overlap=chunk_overlap
                    )
                ),
            )
            
            logger.info(f"‚úÖ Processamento iniciado para: {config.nome}")
            logger.info("‚è≥ Aguarde alguns minutos para conclus√£o...")
            
        except Exception as e:
            raise RuntimeError(f"‚ùå Erro no processamento: {e}")
    
    def criar_ferramenta_busca(self, corpus_id: str) -> Tool:
        """
        Cria ferramenta de busca para um corpus
        
        Args:
            corpus_id: ID do corpus
            
        Returns:
            Ferramenta de busca configurada
        """
        if corpus_id not in self.corpus_ativos:
            raise ValueError(f"Corpus n√£o ativo: {corpus_id}")
        
        corpus_rag = self.corpus_ativos[corpus_id]
        
        try:
            ferramenta = Tool(
                retrieval=Retrieval(
                    vertex_rag_store=VertexRagStore(
                        rag_corpora=[corpus_rag.name],
                        similarity_top_k=self.config.get('top_resultados', 10),
                        vector_distance_threshold=self.config.get('limite_similaridade', 0.5),
                    )
                )
            )
            
            self.ferramentas_busca[corpus_id] = ferramenta
            logger.info(f"üîß Ferramenta de busca criada para: {corpus_id}")
            
            return ferramenta
            
        except Exception as e:
            raise RuntimeError(f"‚ùå Erro ao criar ferramenta: {e}")
    
    def consultar_corpus(self, corpus_id: str, pergunta: str) -> str:
        """
        Faz uma consulta a um corpus espec√≠fico
        
        Args:
            corpus_id: ID do corpus
            pergunta: Pergunta do usu√°rio
            
        Returns:
            Resposta da IA
        """
        if corpus_id not in self.ferramentas_busca:
            raise ValueError(f"Ferramenta de busca n√£o dispon√≠vel para: {corpus_id}")
        
        ferramenta = self.ferramentas_busca[corpus_id]
        config = self.corpus_configs[corpus_id]
        
        logger.info(f"ü§î Consultando {config.nome}: {pergunta[:50]}...")
        
        try:
            # Criar prompt contextualizado
            prompt_contextualizado = f"""
            Voc√™ est√° consultando a base de conhecimento: {config.nome}
            Descri√ß√£o: {config.descricao}
            
            Pergunta do usu√°rio: {pergunta}
            
            Por favor, responda baseado exclusivamente no conte√∫do desta base de conhecimento.
            Se a informa√ß√£o n√£o estiver dispon√≠vel, informe claramente.
            """
            
            resposta = self.cliente_ia.models.generate_content(
                model=self.config.get('modelo_ia', 'gemini-1.5-pro-002'),
                contents=prompt_contextualizado,
                config=GenerateContentConfig(tools=[ferramenta]),
            )
            
            return resposta.text
            
        except Exception as e:
            raise RuntimeError(f"‚ùå Erro na consulta: {e}")
    
    def consultar_multiplos_corpus(self, corpus_ids: List[str], pergunta: str) -> str:
        """
        Consulta m√∫ltiplos corpus simultaneamente
        
        Args:
            corpus_ids: Lista de IDs dos corpus
            pergunta: Pergunta do usu√°rio
            
        Returns:
            Resposta consolidada
        """
        if not corpus_ids:
            raise ValueError("Lista de corpus n√£o pode estar vazia")
        
        # Verificar se todos os corpus est√£o dispon√≠veis
        ferramentas = []
        nomes_corpus = []
        
        for corpus_id in corpus_ids:
            if corpus_id not in self.ferramentas_busca:
                raise ValueError(f"Corpus n√£o dispon√≠vel: {corpus_id}")
            
            ferramentas.append(self.ferramentas_busca[corpus_id])
            nomes_corpus.append(self.corpus_configs[corpus_id].nome)
        
        logger.info(f"üîç Consultando m√∫ltiplos corpus: {', '.join(nomes_corpus)}")
        
        try:
            # Criar prompt para consulta m√∫ltipla
            prompt_multiplo = f"""
            Voc√™ est√° consultando m√∫ltiplas bases de conhecimento simultaneamente:
            {', '.join(nomes_corpus)}
            
            Pergunta do usu√°rio: {pergunta}
            
            Por favor:
            1. Busque informa√ß√µes em todas as bases dispon√≠veis
            2. Consolide as informa√ß√µes de forma coerente
            3. Indique quando informa√ß√µes v√™m de bases espec√≠ficas
            4. Se houver conflitos, mencione as diferentes perspectivas
            """
            
            resposta = self.cliente_ia.models.generate_content(
                model=self.config.get('modelo_ia', 'gemini-1.5-pro-002'),
                contents=prompt_multiplo,
                config=GenerateContentConfig(tools=ferramentas),
            )
            
            return resposta.text
            
        except Exception as e:
            raise RuntimeError(f"‚ùå Erro na consulta m√∫ltipla: {e}")
    
    def obter_estatisticas_corpus(self, corpus_id: str) -> Dict[str, Any]:
        """
        Obt√©m estat√≠sticas de um corpus
        
        Args:
            corpus_id: ID do corpus
            
        Returns:
            Dicion√°rio com estat√≠sticas
        """
        if corpus_id not in self.corpus_configs:
            raise ValueError(f"Corpus n√£o encontrado: {corpus_id}")
        
        config = self.corpus_configs[corpus_id]
        
        # Estat√≠sticas b√°sicas
        stats = {
            'nome': config.nome,
            'descricao': config.descricao,
            'ativo': config.ativo,
            'corpus_criado': config.corpus_id is not None,
            'ferramenta_disponivel': corpus_id in self.ferramentas_busca
        }
        
        # Estat√≠sticas de arquivos
        info_arquivos = self.verificar_arquivos_corpus(corpus_id)
        stats.update(info_arquivos)
        
        return stats
    
    def limpar_corpus(self, corpus_id: str) -> None:
        """
        Remove um corpus e seus recursos
        
        Args:
            corpus_id: ID do corpus
        """
        if corpus_id not in self.corpus_configs:
            raise ValueError(f"Corpus n√£o encontrado: {corpus_id}")
        
        config = self.corpus_configs[corpus_id]
        logger.info(f"üóëÔ∏è Removendo corpus: {config.nome}")
        
        try:
            # Remover corpus do Vertex AI
            if corpus_id in self.corpus_ativos:
                corpus_rag = self.corpus_ativos[corpus_id]
                rag.delete_corpus(corpus_rag.name)
                del self.corpus_ativos[corpus_id]
                logger.info("‚úÖ Corpus removido do Vertex AI")
            
            # Remover ferramenta de busca
            if corpus_id in self.ferramentas_busca:
                del self.ferramentas_busca[corpus_id]
                logger.info("‚úÖ Ferramenta de busca removida")
            
            # Limpar refer√™ncia
            config.corpus_id = None
            
            logger.info(f"‚úÖ Corpus {config.nome} limpo com sucesso")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao limpar corpus: {e}")
    
    def salvar_configuracoes(self) -> None:
        """Salva configura√ß√µes atuais dos corpus"""
        config_file = self.config.get('corpus_config_file', 'rag_corpus_config.json')
        
        try:
            config_data = {}
            for nome, config in self.corpus_configs.items():
                config_data[nome] = config.to_dict()
            
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"‚úÖ Configura√ß√µes salvas em: {config_file}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar configura√ß√µes: {e}")


class ValidAIRAGInterface:
    """
    üé® Interface para o sistema RAG do ValidAI
    
    Fornece m√©todos para integra√ß√£o com Gradio e outras interfaces.
    """
    
    def __init__(self, rag_manager: ValidAIRAGManager):
        self.rag_manager = rag_manager
        self.corpus_selecionado = None
        self.historico_consultas = []
    
    def obter_opcoes_corpus(self) -> List[Tuple[str, str]]:
        """
        Obt√©m op√ß√µes de corpus para dropdown
        
        Returns:
            Lista de tuplas (nome_exibicao, corpus_id)
        """
        opcoes = []
        
        for corpus_id, config in self.rag_manager.corpus_configs.items():
            if config.ativo:
                # Verificar se tem arquivos
                info = self.rag_manager.verificar_arquivos_corpus(corpus_id)
                status = "‚úÖ" if info['arquivos_validos'] > 0 else "‚ö†Ô∏è"
                
                nome_exibicao = f"{status} {config.nome} ({info['arquivos_validos']} docs)"
                opcoes.append((nome_exibicao, corpus_id))
        
        return opcoes
    
    def selecionar_corpus(self, corpus_id: str) -> str:
        """
        Seleciona um corpus para consultas
        
        Args:
            corpus_id: ID do corpus
            
        Returns:
            Mensagem de status
        """
        if not corpus_id:
            return "‚ö†Ô∏è Nenhum corpus selecionado"
        
        if corpus_id not in self.rag_manager.corpus_configs:
            return f"‚ùå Corpus n√£o encontrado: {corpus_id}"
        
        self.corpus_selecionado = corpus_id
        config = self.rag_manager.corpus_configs[corpus_id]
        
        # Verificar status
        info = self.rag_manager.verificar_arquivos_corpus(corpus_id)
        
        if info['arquivos_validos'] == 0:
            return f"‚ö†Ô∏è {config.nome} selecionado, mas n√£o h√° arquivos v√°lidos"
        
        # Verificar se corpus est√° pronto
        if corpus_id not in self.rag_manager.ferramentas_busca:
            return f"üîß {config.nome} selecionado. Preparando para consultas..."
        
        return f"‚úÖ {config.nome} pronto para consultas ({info['arquivos_validos']} documentos)"
    
    def processar_consulta(self, pergunta: str) -> str:
        """
        Processa uma consulta do usu√°rio
        
        Args:
            pergunta: Pergunta do usu√°rio
            
        Returns:
            Resposta da IA
        """
        if not self.corpus_selecionado:
            return "‚ö†Ô∏è Selecione um corpus antes de fazer perguntas"
        
        if not pergunta.strip():
            return "‚ö†Ô∏è Digite uma pergunta v√°lida"
        
        try:
            # Verificar se ferramenta est√° dispon√≠vel
            if self.corpus_selecionado not in self.rag_manager.ferramentas_busca:
                return "üîß Corpus ainda n√£o est√° pronto. Aguarde o processamento..."
            
            # Fazer consulta
            resposta = self.rag_manager.consultar_corpus(
                self.corpus_selecionado, 
                pergunta
            )
            
            # Adicionar ao hist√≥rico
            self.historico_consultas.append({
                'timestamp': datetime.now().isoformat(),
                'corpus': self.corpus_selecionado,
                'pergunta': pergunta,
                'resposta': resposta
            })
            
            # Adicionar cabe√ßalho informativo
            config = self.rag_manager.corpus_configs[self.corpus_selecionado]
            cabecalho = f"**üìö Consultando: {config.nome}**\n\n"
            
            return cabecalho + resposta
            
        except Exception as e:
            return f"‚ùå Erro na consulta: {str(e)}"
    
    def obter_status_sistema(self) -> str:
        """
        Obt√©m status geral do sistema RAG
        
        Returns:
            Status formatado em markdown
        """
        corpus_info = self.rag_manager.listar_corpus_disponiveis()
        
        status = "## üìä Status do Sistema RAG\n\n"
        
        for info in corpus_info:
            emoji = "‚úÖ" if info['corpus_criado'] else "‚ö†Ô∏è"
            status += f"- {emoji} **{info['nome']}**: "
            
            if info['corpus_criado']:
                status += "Pronto para consultas\n"
            elif info['tem_arquivos']:
                status += "Arquivos dispon√≠veis, aguardando processamento\n"
            else:
                status += "Sem arquivos dispon√≠veis\n"
        
        return status


def criar_configuracao_rag_padrao() -> Dict[str, Any]:
    """
    Cria configura√ß√£o padr√£o para o sistema RAG
    
    Returns:
        Dicion√°rio de configura√ß√£o
    """
    return {
        'project_id': 'bv-cdip-des',
        'location': 'us-central1',
        'bucket_name': 'validai-rag-bucket',
        'modelo_embedding': 'publishers/google/models/text-embedding-005',
        'modelo_ia': 'gemini-1.5-pro-002',
        'chunk_size': 1024,
        'chunk_overlap': 256,
        'top_resultados': 10,
        'limite_similaridade': 0.5,
        'tamanho_max_arquivo_mb': 50,
        'corpus_config_file': 'rag_corpus_config.json'
    }


# Exemplo de uso
if __name__ == "__main__":
    # Configura√ß√£o de exemplo
    config = criar_configuracao_rag_padrao()
    
    # Inicializar sistema RAG
    rag_manager = ValidAIRAGManager(config)
    
    # Criar interface
    interface = ValidAIRAGInterface(rag_manager)
    
    # Listar corpus dispon√≠veis
    print("üìö Corpus dispon√≠veis:")
    for nome, corpus_id in interface.obter_opcoes_corpus():
        print(f"  - {nome} ({corpus_id})")