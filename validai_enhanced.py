#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ ValidAI Enhanced - Sistema Aprimorado de Valida√ß√£o de Modelos ML

Uma vers√£o melhorada do ValidAI que incorpora os melhores padr√µes de UX,
configura√ß√£o flex√≠vel e tratamento de erros do RAG Codebase Local.

Mant√©m todas as funcionalidades originais do ValidAI, mas com uma experi√™ncia
muito mais amig√°vel e robusta! üéØ
"""

import os
import sys
import warnings
import logging
from pathlib import Path
from typing import Dict, Any, Optional, Tuple
from dataclasses import dataclass
import json

# Suprimir warnings desnecess√°rios
warnings.filterwarnings("ignore", message="The 'tuples' format for chatbot messages is deprecated")

# Imports do ValidAI original
import gradio as gr

# Configurar logging humanizado
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)


@dataclass
class ConfigValidAI:
    """
    üéõÔ∏è Configura√ß√µes do ValidAI de forma organizada e flex√≠vel!
    
    Agora voc√™ pode personalizar tudo sem mexer no c√≥digo principal.
    """
    # Configura√ß√µes do Google Cloud
    project_id: str = "bv-cdip-des"
    location: str = "us-central1"
    
    # Configura√ß√µes do modelo
    modelo_versao: str = "gemini-1.5-pro-002"
    nome_exibicao: str = "Gemini 1.5 Pro 002"
    temperatura: float = 0.2
    top_p: float = 0.8
    max_output_tokens: int = 8000
    
    # Configura√ß√µes de interface
    time_sleep: float = 0.006
    time_sleep_compare: float = 0.006
    
    # Configura√ß√µes de diret√≥rios
    temp_dir: str = "./temp_files"
    historico_dir: str = "./historico_conversas"
    base_conhecimento_dir: str = "./base_conhecimento"
    
    # Configura√ß√µes de seguran√ßa
    tamanho_max_arquivo_mb: int = 50
    extensoes_permitidas: list = None
    
    def __post_init__(self):
        """Configura√ß√µes padr√£o ap√≥s inicializa√ß√£o"""
        if self.extensoes_permitidas is None:
            self.extensoes_permitidas = [
                ".pdf", ".sas", ".ipynb", ".py", ".txt", ".csv", ".xlsx", 
                ".png", ".jpg", ".jpeg", ".mp4"
            ]


class GerenciadorConfig:
    """
    üìã Gerenciador inteligente de configura√ß√µes do ValidAI
    
    Carrega configura√ß√µes de arquivos, vari√°veis de ambiente ou usa padr√µes.
    Muito mais flex√≠vel que hardcoding! üîß
    """
    
    def __init__(self, arquivo_config: Optional[str] = None):
        self.arquivo_config = arquivo_config or "validai_config.json"
        self.config = self._carregar_configuracao()
    
    def _carregar_configuracao(self) -> ConfigValidAI:
        """
        Carrega configura√ß√£o de m√∫ltiplas fontes com prioridade:
        1. Arquivo JSON (se existir)
        2. Vari√°veis de ambiente
        3. Valores padr√£o
        """
        logger.info("üîç Carregando configura√ß√µes do ValidAI...")
        
        # Come√ßar com padr√µes
        config_dict = {}
        
        # Tentar carregar do arquivo
        if os.path.exists(self.arquivo_config):
            try:
                with open(self.arquivo_config, 'r', encoding='utf-8') as f:
                    config_dict = json.load(f)
                logger.info(f"‚úÖ Configura√ß√µes carregadas de: {self.arquivo_config}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao ler config: {e}. Usando padr√µes.")
        
        # Sobrescrever com vari√°veis de ambiente
        env_mappings = {
            'VALIDAI_PROJECT_ID': 'project_id',
            'VALIDAI_LOCATION': 'location',
            'VALIDAI_MODELO': 'modelo_versao',
            'VALIDAI_TEMPERATURA': 'temperatura',
            'VALIDAI_MAX_TOKENS': 'max_output_tokens'
        }
        
        for env_var, config_key in env_mappings.items():
            if os.getenv(env_var):
                config_dict[config_key] = os.getenv(env_var)
        
        # Converter tipos quando necess√°rio
        if 'temperatura' in config_dict:
            config_dict['temperatura'] = float(config_dict['temperatura'])
        if 'max_output_tokens' in config_dict:
            config_dict['max_output_tokens'] = int(config_dict['max_output_tokens'])
        
        return ConfigValidAI(**config_dict)
    
    def salvar_configuracao(self) -> None:
        """Salva a configura√ß√£o atual em arquivo JSON"""
        try:
            config_dict = {
                'project_id': self.config.project_id,
                'location': self.config.location,
                'modelo_versao': self.config.modelo_versao,
                'temperatura': self.config.temperatura,
                'max_output_tokens': self.config.max_output_tokens
            }
            
            with open(self.arquivo_config, 'w', encoding='utf-8') as f:
                json.dump(config_dict, f, indent=2, ensure_ascii=False)
            
            logger.info(f"‚úÖ Configura√ß√µes salvas em: {self.arquivo_config}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar configura√ß√µes: {e}")
    
    def validar_configuracao(self) -> bool:
        """
        Valida se as configura√ß√µes est√£o corretas e completas
        
        Returns:
            True se v√°lida, False caso contr√°rio
        """
        logger.info("üîç Validando configura√ß√µes...")
        
        erros = []
        
        # Validar campos obrigat√≥rios
        if not self.config.project_id or self.config.project_id == "seu-projeto-aqui":
            erros.append("PROJECT_ID n√£o configurado corretamente")
        
        if not self.config.modelo_versao:
            erros.append("MODELO_VERSAO n√£o pode estar vazio")
        
        if not (0.0 <= self.config.temperatura <= 2.0):
            erros.append("TEMPERATURA deve estar entre 0.0 e 2.0")
        
        if self.config.max_output_tokens <= 0:
            erros.append("MAX_OUTPUT_TOKENS deve ser positivo")
        
        # Validar diret√≥rios
        for dir_path in [self.config.temp_dir, self.config.historico_dir]:
            if not os.path.exists(dir_path):
                try:
                    os.makedirs(dir_path, exist_ok=True)
                    logger.info(f"üìÅ Diret√≥rio criado: {dir_path}")
                except Exception as e:
                    erros.append(f"N√£o foi poss√≠vel criar diret√≥rio {dir_path}: {e}")
        
        if erros:
            logger.error("‚ùå Erros de configura√ß√£o encontrados:")
            for erro in erros:
                logger.error(f"   ‚Ä¢ {erro}")
            return False
        
        logger.info("‚úÖ Configura√ß√µes v√°lidas!")
        return True


class ValidadorArquivos:
    """
    üîç Validador inteligente de arquivos com feedback rico
    
    Verifica tipos, tamanhos e integridade antes do processamento.
    """
    
    def __init__(self, config: ConfigValidAI):
        self.config = config
    
    def validar_arquivo(self, arquivo_path: str) -> Tuple[bool, str]:
        """
        Valida um arquivo individual
        
        Returns:
            (√©_v√°lido, mensagem_feedback)
        """
        if not os.path.exists(arquivo_path):
            return False, f"‚ùå Arquivo n√£o encontrado: {arquivo_path}"
        
        # Verificar extens√£o
        extensao = Path(arquivo_path).suffix.lower()
        if extensao not in self.config.extensoes_permitidas:
            return False, f"‚ùå Tipo de arquivo n√£o suportado: {extensao}"
        
        # Verificar tamanho
        tamanho_mb = os.path.getsize(arquivo_path) / (1024 * 1024)
        if tamanho_mb > self.config.tamanho_max_arquivo_mb:
            return False, f"‚ùå Arquivo muito grande: {tamanho_mb:.1f}MB (m√°ximo: {self.config.tamanho_max_arquivo_mb}MB)"
        
        return True, f"‚úÖ Arquivo v√°lido: {Path(arquivo_path).name} ({tamanho_mb:.1f}MB)"
    
    def validar_multiplos_arquivos(self, arquivos: list) -> Dict[str, Any]:
        """
        Valida m√∫ltiplos arquivos e retorna relat√≥rio detalhado
        
        Returns:
            Dicion√°rio com estat√≠sticas e feedback
        """
        if not arquivos:
            return {
                'validos': [],
                'invalidos': [],
                'total_validos': 0,
                'total_invalidos': 0,
                'tamanho_total_mb': 0,
                'mensagem': "‚ö†Ô∏è Nenhum arquivo fornecido"
            }
        
        validos = []
        invalidos = []
        tamanho_total = 0
        
        logger.info(f"üîç Validando {len(arquivos)} arquivo(s)...")
        
        for arquivo in arquivos:
            eh_valido, mensagem = self.validar_arquivo(arquivo)
            
            if eh_valido:
                validos.append(arquivo)
                tamanho_total += os.path.getsize(arquivo) / (1024 * 1024)
                logger.info(f"   {mensagem}")
            else:
                invalidos.append({'arquivo': arquivo, 'erro': mensagem})
                logger.warning(f"   {mensagem}")
        
        # Gerar mensagem de resumo
        if len(validos) == len(arquivos):
            mensagem = f"üéâ Todos os {len(validos)} arquivos s√£o v√°lidos! ({tamanho_total:.1f}MB total)"
        elif len(validos) > 0:
            mensagem = f"‚ö†Ô∏è {len(validos)} v√°lidos, {len(invalidos)} com problemas"
        else:
            mensagem = "‚ùå Nenhum arquivo v√°lido encontrado"
        
        return {
            'validos': validos,
            'invalidos': invalidos,
            'total_validos': len(validos),
            'total_invalidos': len(invalidos),
            'tamanho_total_mb': tamanho_total,
            'mensagem': mensagem
        }


class FeedbackManager:
    """
    üí¨ Gerenciador de feedback humanizado para o usu√°rio
    
    Transforma mensagens t√©cnicas em comunica√ß√£o amig√°vel e √∫til.
    """
    
    @staticmethod
    def sucesso(mensagem: str) -> str:
        """Formata mensagem de sucesso"""
        return f"‚úÖ {mensagem}"
    
    @staticmethod
    def erro(mensagem: str, dica: Optional[str] = None) -> str:
        """Formata mensagem de erro com dica opcional"""
        resultado = f"‚ùå {mensagem}"
        if dica:
            resultado += f"\nüí° Dica: {dica}"
        return resultado
    
    @staticmethod
    def aviso(mensagem: str) -> str:
        """Formata mensagem de aviso"""
        return f"‚ö†Ô∏è {mensagem}"
    
    @staticmethod
    def info(mensagem: str) -> str:
        """Formata mensagem informativa"""
        return f"‚ÑπÔ∏è {mensagem}"
    
    @staticmethod
    def progresso(atual: int, total: int, acao: str = "Processando") -> str:
        """Formata mensagem de progresso"""
        porcentagem = (atual / total) * 100 if total > 0 else 0
        return f"üìä {acao}: {atual}/{total} ({porcentagem:.1f}%)"
    
    @staticmethod
    def formatear_tempo_estimado(segundos: int) -> str:
        """Converte segundos em formato amig√°vel"""
        if segundos < 60:
            return f"{segundos}s"
        elif segundos < 3600:
            minutos = segundos // 60
            return f"{minutos}min"
        else:
            horas = segundos // 3600
            minutos = (segundos % 3600) // 60
            return f"{horas}h {minutos}min"


class ValidAIEnhanced:
    """
    üöÄ ValidAI Enhanced - Vers√£o aprimorada do sistema de valida√ß√£o
    
    Incorpora os melhores padr√µes de UX, configura√ß√£o flex√≠vel e robustez
    do RAG Codebase Local, mantendo todas as funcionalidades do ValidAI original.
    """
    
    def __init__(self, arquivo_config: Optional[str] = None):
        """
        Inicializa o ValidAI Enhanced
        
        Args:
            arquivo_config: Caminho para arquivo de configura√ß√£o (opcional)
        """
        logger.info("üöÄ Inicializando ValidAI Enhanced...")
        
        # Carregar configura√ß√µes
        self.gerenciador_config = GerenciadorConfig(arquivo_config)
        self.config = self.gerenciador_config.config
        
        # Validar configura√ß√µes
        if not self.gerenciador_config.validar_configuracao():
            raise RuntimeError("‚ùå Configura√ß√µes inv√°lidas. Verifique os logs acima.")
        
        # Inicializar componentes
        self.validador_arquivos = ValidadorArquivos(self.config)
        self.feedback = FeedbackManager()
        
        # Configurar ambiente
        self._configurar_ambiente()
        
        # Importar e inicializar componentes do ValidAI original
        self._inicializar_validai_original()
        
        logger.info("‚úÖ ValidAI Enhanced inicializado com sucesso!")
    
    def _configurar_ambiente(self) -> None:
        """Configura o ambiente de execu√ß√£o"""
        # Configurar diret√≥rio tempor√°rio do Gradio
        os.environ["GRADIO_TEMP_DIR"] = self.config.temp_dir
        
        # Criar diret√≥rios necess√°rios
        for diretorio in [self.config.temp_dir, self.config.historico_dir]:
            os.makedirs(diretorio, exist_ok=True)
    
    def _inicializar_validai_original(self) -> None:
        """
        Inicializa os componentes do ValidAI original com as novas configura√ß√µes
        """
        try:
            # Importar m√≥dulos do ValidAI original
            from config.variaveis import nome_exib
            from frontend.variaveis_front import (
                logo_img, theme, css_interface, logo_validai,
                logo_validai_pre, logo_validai_rag, informacoes
            )
            from frontend.funcoes_front import bt_exportar, altera_bt, on_dropdown_change
            from backend.Chat_LLM import chat_multimodal, chat_compare, fn_chat_rag_manual
            
            # Armazenar refer√™ncias
            self.componentes_originais = {
                'nome_exib': nome_exib,
                'logo_img': logo_img,
                'theme': theme,
                'css_interface': css_interface,
                'logos': {
                    'validai': logo_validai,
                    'pre': logo_validai_pre,
                    'rag': logo_validai_rag
                },
                'informacoes': informacoes,
                'funcoes': {
                    'bt_exportar': bt_exportar,
                    'altera_bt': altera_bt,
                    'on_dropdown_change': on_dropdown_change
                },
                'chat_functions': {
                    'multimodal': chat_multimodal,
                    'compare': chat_compare,
                    'rag': fn_chat_rag_manual
                }
            }
            
            logger.info("‚úÖ Componentes do ValidAI original carregados")
            
        except ImportError as e:
            logger.error(f"‚ùå Erro ao importar componentes do ValidAI: {e}")
            raise RuntimeError("N√£o foi poss√≠vel carregar os componentes do ValidAI original")
    
    def criar_interface_aprimorada(self) -> gr.Blocks:
        """
        Cria a interface Gradio aprimorada com melhor UX
        
        Returns:
            Interface Gradio configurada
        """
        logger.info("üé® Criando interface aprimorada...")
        
        # Criar chatbots com configura√ß√µes aprimoradas
        chatbot = gr.Chatbot(
            avatar_images=[None, self.componentes_originais['logo_img']],
            type='tuples',
            height="55vh",
            elem_id="espaco_chat",
            label=self.config.nome_exibicao,
            show_copy_button=True,  # Novo: bot√£o de copiar
            show_share_button=False  # Desabilitar compartilhamento por seguran√ßa
        )
        
        chatbot_rag = gr.Chatbot(
            avatar_images=[None, self.componentes_originais['logo_img']],
            type='tuples',
            height="55vh",
            elem_id="espaco_chat",
            label=self.config.nome_exibicao,
            show_copy_button=True,
            show_share_button=False
        )
        
        multimodal_text = gr.MultimodalTextbox(
            file_count='multiple',
            placeholder="Digite sua mensagem ou arraste arquivos aqui... üìé"
        )
        
        # Criar interface principal
        with gr.Blocks(
            title="ValidAI Enhanced - Valida√ß√£o Inteligente de Modelos",
            theme=self.componentes_originais['theme'],
            css=self.componentes_originais['css_interface'],
            fill_height=True,
            fill_width=True
        ) as interface:
            
            # Cabe√ßalho aprimorado
            with gr.Row():
                gr.HTML(f"""
                <div style="text-align: center; padding: 20px;">
                    <h1>üöÄ ValidAI Enhanced</h1>
                    <p style="color: #666;">Sistema Inteligente de Valida√ß√£o de Modelos ML</p>
                    <p style="font-size: 0.9em; color: #888;">
                        Modelo: {self.config.modelo_versao} | 
                        Temperatura: {self.config.temperatura} | 
                        Tokens: {self.config.max_output_tokens}
                    </p>
                </div>
                """)
            
            # Estados da aplica√ß√£o (mantendo compatibilidade)
            lista_abas = gr.State(None)
            block_chat = gr.State(0)
            arquivo_excel = gr.State("")
            chat = gr.State(None)
            historico_compare = gr.State("")
            selected_rag = gr.State(None)
            selected_rag_antes = gr.State(None)
            diretorio_rag = gr.State(self.config.base_conhecimento_dir)
            lista_arquivos = gr.State([])
            df_resumo = gr.State(None)
            chat_rag = gr.State(None)
            
            # Abas principais
            with gr.Tab("üí¨ ValidAI Chat"):
                self._criar_aba_chat(chatbot, multimodal_text, lista_abas, block_chat, arquivo_excel, chat)
            
            with gr.Tab("üîç Pr√©-Validador"):
                self._criar_aba_pre_validador(historico_compare)
            
            with gr.Tab("üìö RAG Knowledge"):
                self._criar_aba_rag(chatbot_rag, selected_rag, selected_rag_antes, 
                                  diretorio_rag, lista_arquivos, df_resumo, chat_rag)
            
            with gr.Tab("‚öôÔ∏è Configura√ß√µes"):
                self._criar_aba_configuracoes()
            
            with gr.Tab("‚ÑπÔ∏è Informa√ß√µes"):
                self._criar_aba_informacoes()
        
        logger.info("‚úÖ Interface criada com sucesso!")
        return interface
    
    def _criar_aba_chat(self, chatbot, multimodal_text, lista_abas, block_chat, arquivo_excel, chat):
        """Cria a aba de chat multimodal aprimorada"""
        with gr.Column():
            # √Årea de status
            status_area = gr.HTML(
                value=self.feedback.info("Pronto para conversar! Envie uma mensagem ou arquivo."),
                elem_id="status_area"
            )
            
            # Interface de chat
            chat_interface = gr.ChatInterface(
                fn=self.componentes_originais['chat_functions']['multimodal'],
                title=f"""<img src='{self.componentes_originais['logos']['validai']}' style="height: 42px;">""",
                multimodal=True,
                description="""<p style="margin-bottom: 9px !important;">Gest√£o de Risco de Modelos - Enhanced</p>""",
                chatbot=chatbot,
                additional_inputs=[lista_abas, block_chat, arquivo_excel, chat],
                additional_outputs=[lista_abas, block_chat, arquivo_excel, chat],
                type='tuples',
                textbox=multimodal_text
            )
            
            # √Årea de dicas
            with gr.Accordion("üí° Dicas de Uso", open=False):
                gr.Markdown("""
                ### üìé Tipos de arquivo suportados:
                - **Documentos**: PDF, TXT, MD
                - **C√≥digos**: Python (.py), Jupyter (.ipynb), SAS (.sas)
                - **Dados**: CSV, Excel (.xlsx)
                - **M√≠dia**: Imagens (PNG, JPG), V√≠deos (MP4)
                
                ### üéØ Comandos especiais:
                - Digite "exportar conversa" para salvar o hist√≥rico
                - Use m√∫ltiplos arquivos para an√°lise comparativa
                - Pergunte sobre metodologias, valida√ß√µes e boas pr√°ticas
                """)
    
    def _criar_aba_pre_validador(self, historico_compare):
        """Cria a aba do pr√©-validador aprimorada"""
        with gr.Column():
            gr.HTML("""
            <div style="text-align: center; margin-bottom: 20px;">
                <h3>üîç Pr√©-Validador Inteligente</h3>
                <p>An√°lise automatizada de documentos e c√≥digos de modelos ML</p>
            </div>
            """)
            
            # Interface aprimorada
            with gr.Row():
                with gr.Column(scale=1):
                    docs_input = gr.Files(
                        label="üìÑ Documentos de Modelo",
                        file_types=[".pdf"],
                        file_count="single"
                    )
                    
                with gr.Column(scale=1):
                    code_input = gr.Files(
                        label="üíª C√≥digos de Implementa√ß√£o",
                        file_types=[".ipynb", ".sas", ".py"],
                        file_count="multiple"
                    )
            
            # √Årea de valida√ß√£o em tempo real
            validation_status = gr.HTML(
                value=self.feedback.info("Aguardando arquivos para valida√ß√£o..."),
                elem_id="validation_status"
            )
            
            # Bot√µes de a√ß√£o
            with gr.Row():
                validate_btn = gr.Button("üöÄ Iniciar Valida√ß√£o", variant="primary", size="lg")
                clear_btn = gr.Button("üóëÔ∏è Limpar", variant="secondary")
            
            # √Årea de resultados
            results_area = gr.Markdown(
                value="",
                max_height="380px",
                elem_id="saida_pre"
            )
            
            # Bot√µes de exporta√ß√£o
            with gr.Row():
                export_btn = gr.Button("üìÑ Gerar Relat√≥rio PDF", visible=False)
                download_btn = gr.DownloadButton("‚¨áÔ∏è Download", visible=False)
            
            # Conectar eventos
            validate_btn.click(
                fn=self.componentes_originais['chat_functions']['compare'],
                inputs=[docs_input, code_input, historico_compare],
                outputs=[results_area, historico_compare]
            ).then(
                fn=lambda: [gr.Button(visible=True), gr.HTML(
                    self.feedback.sucesso("Valida√ß√£o conclu√≠da! Voc√™ pode gerar o relat√≥rio PDF.")
                )],
                outputs=[export_btn, validation_status]
            )
            
            export_btn.click(
                fn=self.componentes_originais['funcoes']['bt_exportar'],
                inputs=historico_compare,
                outputs=[export_btn, download_btn]
            )
            
            download_btn.click(
                fn=self.componentes_originais['funcoes']['altera_bt'],
                outputs=[export_btn, download_btn]
            )
    
    def _criar_aba_rag(self, chatbot_rag, selected_rag, selected_rag_antes, 
                      diretorio_rag, lista_arquivos, df_resumo, chat_rag):
        """Cria a aba RAG aprimorada"""
        with gr.Column():
            gr.HTML("""
            <div style="text-align: center; margin-bottom: 20px;">
                <h3>üìö Base de Conhecimento RAG</h3>
                <p>Consulte documentos especializados em valida√ß√£o de modelos</p>
            </div>
            """)
            
            # Seletor de base de conhecimento aprimorado
            with gr.Row():
                dropdown = gr.Dropdown(
                    choices=[
                        "Conte√∫dos de 'INs'",
                        "Valida√ß√µes de Riscos de Mercado", 
                        "Valida√ß√µes de Riscos de Cr√©dito",
                        "Google Search"
                    ],
                    value=None,
                    label="üéØ Selecione a Base de Conhecimento",
                    elem_id="dropdown123",
                    info="Escolha a fonte de informa√ß√£o mais adequada para sua consulta"
                )
            
            # Status da base selecionada
            rag_status = gr.HTML(
                value=self.feedback.aviso("Selecione uma base de conhecimento para come√ßar"),
                elem_id="rag_status"
            )
            
            # Interface de chat RAG
            chat_rag_interface = gr.ChatInterface(
                fn=self.componentes_originais['chat_functions']['rag'],
                title=f"""<img src='{self.componentes_originais['logos']['rag']}' style="height: 42px;">""",
                multimodal=False,
                description="""<p style="margin-bottom: 9px !important;">Consultas Especializadas</p>""",
                chatbot=chatbot_rag,
                type='tuples',
                additional_inputs=[selected_rag, selected_rag_antes, diretorio_rag, 
                                lista_arquivos, df_resumo, chat_rag],
                additional_outputs=[selected_rag, selected_rag_antes, diretorio_rag,
                                  lista_arquivos, df_resumo, chat_rag]
            )
            
            # Conectar eventos
            dropdown.change(
                fn=self.componentes_originais['funcoes']['on_dropdown_change'],
                inputs=[dropdown, selected_rag],
                outputs=selected_rag
            ).then(
                fn=lambda x: self.feedback.sucesso(f"Base selecionada: {x}") if x else self.feedback.aviso("Nenhuma base selecionada"),
                inputs=dropdown,
                outputs=rag_status
            )
    
    def _criar_aba_configuracoes(self):
        """Cria a aba de configura√ß√µes"""
        with gr.Column():
            gr.HTML("""
            <div style="text-align: center; margin-bottom: 20px;">
                <h3>‚öôÔ∏è Configura√ß√µes do Sistema</h3>
                <p>Personalize o comportamento do ValidAI Enhanced</p>
            </div>
            """)
            
            with gr.Accordion("ü§ñ Configura√ß√µes do Modelo", open=True):
                modelo_input = gr.Textbox(
                    label="Vers√£o do Modelo",
                    value=self.config.modelo_versao,
                    info="Vers√£o do modelo Gemini a ser utilizada"
                )
                
                temp_input = gr.Slider(
                    label="Temperatura",
                    minimum=0.0,
                    maximum=2.0,
                    step=0.1,
                    value=self.config.temperatura,
                    info="Controla a criatividade das respostas (0.0 = conservador, 2.0 = criativo)"
                )
                
                tokens_input = gr.Number(
                    label="M√°ximo de Tokens",
                    value=self.config.max_output_tokens,
                    info="Limite m√°ximo de tokens na resposta"
                )
            
            with gr.Accordion("üìÅ Configura√ß√µes de Arquivos", open=False):
                tamanho_max_input = gr.Number(
                    label="Tamanho M√°ximo de Arquivo (MB)",
                    value=self.config.tamanho_max_arquivo_mb,
                    info="Arquivos maiores ser√£o rejeitados"
                )
                
                extensoes_input = gr.Textbox(
                    label="Extens√µes Permitidas",
                    value=", ".join(self.config.extensoes_permitidas),
                    info="Lista de extens√µes separadas por v√≠rgula"
                )
            
            # Bot√µes de a√ß√£o
            with gr.Row():
                salvar_btn = gr.Button("üíæ Salvar Configura√ß√µes", variant="primary")
                resetar_btn = gr.Button("üîÑ Restaurar Padr√µes", variant="secondary")
            
            status_config = gr.HTML(
                value=self.feedback.info("Configura√ß√µes carregadas com sucesso"),
                elem_id="status_config"
            )
            
            # Conectar eventos (implementa√ß√£o simplificada)
            salvar_btn.click(
                fn=lambda: self.feedback.sucesso("Configura√ß√µes salvas! Reinicie a aplica√ß√£o para aplicar."),
                outputs=status_config
            )
    
    def _criar_aba_informacoes(self):
        """Cria a aba de informa√ß√µes aprimorada"""
        with gr.Column():
            gr.HTML("""
            <div style="text-align: center; margin-bottom: 30px;">
                <h2>üöÄ ValidAI Enhanced</h2>
                <p style="font-size: 1.2em; color: #666;">Sistema Inteligente de Valida√ß√£o de Modelos ML</p>
            </div>
            """)
            
            with gr.Accordion("üìã Sobre o ValidAI Enhanced", open=True):
                gr.Markdown(f"""
                ### üéØ **Vis√£o Geral**
                O ValidAI Enhanced √© uma vers√£o aprimorada do sistema original, incorporando:
                - **Interface mais intuitiva** com feedback rico
                - **Configura√ß√µes flex√≠veis** via arquivo ou vari√°veis de ambiente  
                - **Valida√ß√£o robusta** de arquivos e configura√ß√µes
                - **Experi√™ncia do usu√°rio** inspirada nas melhores pr√°ticas
                
                ### üîß **Configura√ß√£o Atual**
                - **Modelo**: {self.config.modelo_versao}
                - **Temperatura**: {self.config.temperatura}
                - **Tokens M√°ximos**: {self.config.max_output_tokens}
                - **Projeto**: {self.config.project_id}
                - **Localiza√ß√£o**: {self.config.location}
                """)
            
            with gr.Accordion("üöÄ Funcionalidades", open=False):
                gr.Markdown("""
                ### üí¨ **Chat Multimodal**
                - An√°lise de documentos PDF, c√≥digos Python/SAS/Jupyter
                - Processamento de imagens e v√≠deos
                - An√°lise de dados CSV/Excel
                - Exporta√ß√£o de conversas
                
                ### üîç **Pr√©-Validador**
                - Valida√ß√£o automatizada de documenta√ß√£o
                - An√°lise de qualidade de c√≥digo
                - Verifica√ß√£o de consist√™ncia c√≥digo-documenta√ß√£o
                - Relat√≥rios em PDF
                
                ### üìö **Base de Conhecimento RAG**
                - Consultas especializadas em regulamenta√ß√µes
                - Acesso a relat√≥rios de valida√ß√£o
                - Integra√ß√£o com Google Search
                - Respostas contextualizadas
                """)
            
            with gr.Accordion("üë• Contatos e Suporte", open=False):
                gr.Markdown(self.componentes_originais['informacoes'])
    
    def executar(self, 
                share: bool = False, 
                debug: bool = False,
                porta: Optional[int] = None) -> None:
        """
        Executa a aplica√ß√£o ValidAI Enhanced
        
        Args:
            share: Se True, cria link p√∫blico (cuidado com seguran√ßa!)
            debug: Ativa modo debug
            porta: Porta espec√≠fica (opcional)
        """
        logger.info("üöÄ Iniciando ValidAI Enhanced...")
        
        # Criar interface
        interface = self.criar_interface_aprimorada()
        
        # Configurar par√¢metros de execu√ß√£o
        launch_params = {
            'show_api': False,
            'allowed_paths': [self.config.historico_dir],
            'quiet': not debug,
            'share': share
        }
        
        if porta:
            launch_params['server_port'] = porta
        
        # Mostrar informa√ß√µes de inicializa√ß√£o
        logger.info("‚úÖ ValidAI Enhanced pronto!")
        logger.info(f"üìä Configura√ß√µes: {self.config.modelo_versao} | Temp: {self.config.temperatura}")
        
        if share:
            logger.warning("‚ö†Ô∏è Modo compartilhamento ativado - cuidado com dados sens√≠veis!")
        
        # Executar aplica√ß√£o
        try:
            interface.launch(**launch_params)
        except KeyboardInterrupt:
            logger.info("üëã ValidAI Enhanced encerrado pelo usu√°rio")
        except Exception as e:
            logger.error(f"‚ùå Erro na execu√ß√£o: {e}")
            raise


def main():
    """
    Fun√ß√£o principal do ValidAI Enhanced
    """
    print("\n" + "="*70)
    print("üöÄ ValidAI Enhanced - Sistema Inteligente de Valida√ß√£o")
    print("="*70)
    print("\nVers√£o aprimorada com melhor UX e configura√ß√£o flex√≠vel! üéâ\n")
    
    try:
        # Verificar argumentos da linha de comando
        debug = '--debug' in sys.argv
        share = '--share' in sys.argv
        
        # Inicializar aplica√ß√£o
        app = ValidAIEnhanced()
        
        # Executar
        app.executar(share=share, debug=debug)
        
    except Exception as e:
        logger.error(f"üí• Erro fatal: {e}")
        logger.info("\nüîß Dicas para resolver:")
        logger.info("   ‚Ä¢ Verifique se todas as depend√™ncias est√£o instaladas")
        logger.info("   ‚Ä¢ Confirme as configura√ß√µes do Google Cloud")
        logger.info("   ‚Ä¢ Execute com --debug para mais informa√ß√µes")
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())