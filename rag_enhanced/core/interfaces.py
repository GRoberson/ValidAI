#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîå Interfaces - Defini√ß√µes de interfaces base para o RAG Enhanced

Este m√≥dulo define as interfaces abstratas que todos os componentes principais
devem implementar, garantindo consist√™ncia e permitindo f√°cil extensibilidade.
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Any, Callable
from pathlib import Path

from .models import (
    RAGConfig, ValidationResult, ProcessingResult, QueryResponse,
    ProcessingCheckpoint, ErrorContext, DiagnosticsReport
)


class ConfigurationManagerInterface(ABC):
    """
    üîß Interface para gerenciamento de configura√ß√µes
    
    Define os m√©todos que qualquer gerenciador de configura√ß√£o deve implementar
    para fornecer funcionalidades de carregamento, valida√ß√£o e persist√™ncia.
    """
    
    @abstractmethod
    def get_config(self, profile_name: str = "default") -> RAGConfig:
        """
        Carrega configura√ß√£o para o perfil especificado
        
        Args:
            profile_name: Nome do perfil de configura√ß√£o
            
        Returns:
            Configura√ß√£o carregada e validada
            
        Raises:
            ConfigurationError: Se o perfil n√£o existir ou configura√ß√£o for inv√°lida
        """
        pass
    
    @abstractmethod
    def save_config(self, config: RAGConfig, profile_name: str = "default") -> bool:
        """
        Salva configura√ß√£o no perfil especificado
        
        Args:
            config: Configura√ß√£o a ser salva
            profile_name: Nome do perfil
            
        Returns:
            True se salvou com sucesso
            
        Raises:
            ConfigurationError: Se n√£o conseguir salvar
        """
        pass
    
    @abstractmethod
    def validate_config(self, config: RAGConfig) -> ValidationResult:
        """
        Valida uma configura√ß√£o
        
        Args:
            config: Configura√ß√£o a ser validada
            
        Returns:
            Resultado da valida√ß√£o com detalhes
        """
        pass
    
    @abstractmethod
    def create_config_wizard(self) -> RAGConfig:
        """
        Executa wizard interativo de configura√ß√£o
        
        Returns:
            Configura√ß√£o criada pelo wizard
        """
        pass
    
    @abstractmethod
    def list_profiles(self) -> List[str]:
        """
        Lista perfis de configura√ß√£o dispon√≠veis
        
        Returns:
            Lista de nomes de perfis
        """
        pass


class FileProcessorInterface(ABC):
    """
    üìÅ Interface para processamento de arquivos
    
    Define os m√©todos para an√°lise, upload e processamento de arquivos
    com suporte a progresso, retry e recupera√ß√£o.
    """
    
    @abstractmethod
    def process_codebase(self, path: Path, progress_callback: Optional[Callable] = None) -> ProcessingResult:
        """
        Processa uma base de c√≥digo completa
        
        Args:
            path: Caminho para a base de c√≥digo
            progress_callback: Callback para atualiza√ß√µes de progresso
            
        Returns:
            Resultado do processamento
        """
        pass
    
    @abstractmethod
    def analyze_files(self, files: List[Path]) -> Dict[str, Any]:
        """
        Analisa arquivos para determinar requisitos de processamento
        
        Args:
            files: Lista de arquivos para analisar
            
        Returns:
            An√°lise dos arquivos (tipos, tamanhos, etc.)
        """
        pass
    
    @abstractmethod
    def upload_with_retry(self, files: List[Path]) -> ProcessingResult:
        """
        Faz upload de arquivos com retry autom√°tico
        
        Args:
            files: Lista de arquivos para upload
            
        Returns:
            Resultado do upload
        """
        pass
    
    @abstractmethod
    def resume_processing(self, checkpoint: ProcessingCheckpoint) -> ProcessingResult:
        """
        Resume processamento a partir de um checkpoint
        
        Args:
            checkpoint: Checkpoint de onde resumir
            
        Returns:
            Resultado do processamento resumido
        """
        pass
    
    @abstractmethod
    def create_checkpoint(self) -> ProcessingCheckpoint:
        """
        Cria checkpoint do estado atual
        
        Returns:
            Checkpoint criado
        """
        pass


class QueryEngineInterface(ABC):
    """
    üîç Interface para motor de consultas
    
    Define os m√©todos para processamento de consultas, an√°lise avan√ßada
    e gera√ß√£o de documenta√ß√£o.
    """
    
    @abstractmethod
    def process_query(self, query: str, context: Optional[Dict] = None) -> QueryResponse:
        """
        Processa uma consulta com contexto opcional
        
        Args:
            query: Consulta a ser processada
            context: Contexto adicional para a consulta
            
        Returns:
            Resposta estruturada da consulta
        """
        pass
    
    @abstractmethod
    def analyze_code_patterns(self, focus_areas: Optional[List[str]] = None) -> Dict[str, Any]:
        """
        Analisa padr√µes de c√≥digo na base
        
        Args:
            focus_areas: √Åreas espec√≠ficas para focar a an√°lise
            
        Returns:
            An√°lise de padr√µes encontrados
        """
        pass
    
    @abstractmethod
    def generate_documentation(self, doc_type: str, options: Optional[Dict] = None) -> str:
        """
        Gera documenta√ß√£o baseada no c√≥digo
        
        Args:
            doc_type: Tipo de documenta√ß√£o (api, architecture, etc.)
            options: Op√ß√µes espec√≠ficas para o tipo de documenta√ß√£o
            
        Returns:
            Documenta√ß√£o gerada
        """
        pass
    
    @abstractmethod
    def assess_code_quality(self) -> Dict[str, Any]:
        """
        Avalia qualidade do c√≥digo
        
        Returns:
            Avalia√ß√£o de qualidade com m√©tricas e recomenda√ß√µes
        """
        pass
    
    @abstractmethod
    def analyze_dependencies(self) -> Dict[str, Any]:
        """
        Analisa depend√™ncias da base de c√≥digo
        
        Returns:
            An√°lise de depend√™ncias e estrutura
        """
        pass


class ErrorHandlerInterface(ABC):
    """
    ‚ö†Ô∏è Interface para tratamento de erros
    
    Define os m√©todos para classifica√ß√£o, tratamento e recupera√ß√£o de erros
    com estrat√©gias inteligentes de retry e diagn√≥stico.
    """
    
    @abstractmethod
    def handle_error(self, error: Exception, context: ErrorContext) -> Dict[str, Any]:
        """
        Trata um erro com base no contexto
        
        Args:
            error: Exce√ß√£o ocorrida
            context: Contexto do erro
            
        Returns:
            Resultado do tratamento (recovery, retry, etc.)
        """
        pass
    
    @abstractmethod
    def classify_error(self, error: Exception) -> str:
        """
        Classifica um erro para determinar estrat√©gia de tratamento
        
        Args:
            error: Exce√ß√£o a ser classificada
            
        Returns:
            Classifica√ß√£o do erro
        """
        pass
    
    @abstractmethod
    def run_diagnostics(self) -> DiagnosticsReport:
        """
        Executa diagn√≥sticos do sistema
        
        Returns:
            Relat√≥rio de diagn√≥sticos
        """
        pass
    
    @abstractmethod
    def create_recovery_strategy(self, error_type: str, context: ErrorContext) -> Dict[str, Any]:
        """
        Cria estrat√©gia de recupera√ß√£o para um tipo de erro
        
        Args:
            error_type: Tipo do erro
            context: Contexto do erro
            
        Returns:
            Estrat√©gia de recupera√ß√£o
        """
        pass
    
    @abstractmethod
    def should_retry(self, error: Exception, attempt_count: int) -> bool:
        """
        Determina se deve tentar novamente ap√≥s um erro
        
        Args:
            error: Exce√ß√£o ocorrida
            attempt_count: N√∫mero de tentativas j√° realizadas
            
        Returns:
            True se deve tentar novamente
        """
        pass


class ProgressTrackerInterface(ABC):
    """
    üìä Interface para rastreamento de progresso
    
    Define m√©todos para rastrear e reportar progresso de opera√ß√µes longas.
    """
    
    @abstractmethod
    def start_operation(self, operation_name: str, total_items: int) -> None:
        """
        Inicia rastreamento de uma opera√ß√£o
        
        Args:
            operation_name: Nome da opera√ß√£o
            total_items: Total de itens a processar
        """
        pass
    
    @abstractmethod
    def update_progress(self, completed_items: int, message: Optional[str] = None) -> None:
        """
        Atualiza progresso da opera√ß√£o
        
        Args:
            completed_items: Itens completados
            message: Mensagem opcional de status
        """
        pass
    
    @abstractmethod
    def finish_operation(self, success: bool = True, message: Optional[str] = None) -> None:
        """
        Finaliza rastreamento da opera√ß√£o
        
        Args:
            success: Se a opera√ß√£o foi bem-sucedida
            message: Mensagem final opcional
        """
        pass
    
    @abstractmethod
    def get_eta(self) -> Optional[float]:
        """
        Calcula tempo estimado para conclus√£o
        
        Returns:
            ETA em segundos ou None se n√£o dispon√≠vel
        """
        pass


class TestFrameworkInterface(ABC):
    """
    üß™ Interface para framework de testes
    
    Define m√©todos para execu√ß√£o de testes unit√°rios, integra√ß√£o e performance.
    """
    
    @abstractmethod
    def run_unit_tests(self) -> Dict[str, Any]:
        """
        Executa testes unit√°rios
        
        Returns:
            Resultados dos testes unit√°rios
        """
        pass
    
    @abstractmethod
    def run_integration_tests(self) -> Dict[str, Any]:
        """
        Executa testes de integra√ß√£o
        
        Returns:
            Resultados dos testes de integra√ß√£o
        """
        pass
    
    @abstractmethod
    def run_performance_tests(self) -> Dict[str, Any]:
        """
        Executa testes de performance
        
        Returns:
            Resultados dos testes de performance
        """
        pass
    
    @abstractmethod
    def generate_test_report(self) -> str:
        """
        Gera relat√≥rio completo de testes
        
        Returns:
            Relat√≥rio formatado dos testes
        """
        pass