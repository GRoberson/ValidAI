#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß Corre√ß√µes Cr√≠ticas para ValidAI Enhanced

Este arquivo cont√©m implementa√ß√µes de m√©todos cr√≠ticos que estavam
incompletos ou faltando no projeto ValidAI Enhanced.
"""

import logging
from typing import Dict, Any, List, Tuple, Optional
import gradio as gr

logger = logging.getLogger(__name__)


class CorrecoesCriticas:
    """
    üõ†Ô∏è Classe com implementa√ß√µes de m√©todos cr√≠ticos faltantes
    
    Esta classe fornece implementa√ß√µes para m√©todos que eram essenciais
    mas estavam incompletos no projeto original.
    """
    
    @staticmethod
    def implementar_validacao_configuracao_completa(gerenciador_config) -> bool:
        """
        Implementa√ß√£o completa da valida√ß√£o de configura√ß√£o
        
        Args:
            gerenciador_config: Inst√¢ncia do GerenciadorConfig
            
        Returns:
            True se configura√ß√£o √© v√°lida, False caso contr√°rio
        """
        logger.info("üîç Executando valida√ß√£o completa de configura√ß√£o...")
        
        config = gerenciador_config.config
        erros = []
        avisos = []
        
        # Validar campos obrigat√≥rios
        campos_obrigatorios = {
            'project_id': 'ID do projeto Google Cloud',
            'modelo_versao': 'Vers√£o do modelo Gemini',
            'temperatura': 'Temperatura do modelo',
            'max_output_tokens': 'M√°ximo de tokens de sa√≠da'
        }
        
        for campo, descricao in campos_obrigatorios.items():
            valor = getattr(config, campo, None)
            if not valor:
                erros.append(f"{descricao} n√£o configurado ({campo})")
        
        # Validar tipos e ranges
        if hasattr(config, 'temperatura'):
            if not (0.0 <= config.temperatura <= 2.0):
                erros.append("Temperatura deve estar entre 0.0 e 2.0")
        
        if hasattr(config, 'max_output_tokens'):
            if config.max_output_tokens <= 0 or config.max_output_tokens > 32000:
                erros.append("max_output_tokens deve estar entre 1 e 32000")
        
        if hasattr(config, 'tamanho_max_arquivo_mb'):
            if config.tamanho_max_arquivo_mb <= 0:
                avisos.append("tamanho_max_arquivo_mb deve ser positivo")
        
        # Validar diret√≥rios
        import os
        diretorios = ['temp_dir', 'historico_dir', 'base_conhecimento_dir']
        for dir_attr in diretorios:
            if hasattr(config, dir_attr):
                dir_path = getattr(config, dir_attr)
                try:
                    os.makedirs(dir_path, exist_ok=True)
                    logger.info(f"üìÅ Diret√≥rio verificado/criado: {dir_path}")
                except Exception as e:
                    erros.append(f"N√£o foi poss√≠vel criar diret√≥rio {dir_path}: {e}")
        
        # Validar extens√µes permitidas
        if hasattr(config, 'extensoes_permitidas'):
            if not config.extensoes_permitidas or not isinstance(config.extensoes_permitidas, list):
                avisos.append("Lista de extens√µes permitidas est√° vazia ou inv√°lida")
        
        # Reportar resultados
        if erros:
            logger.error("‚ùå Erros de configura√ß√£o encontrados:")
            for erro in erros:
                logger.error(f"   ‚Ä¢ {erro}")
            return False
        
        if avisos:
            logger.warning("‚ö†Ô∏è Avisos de configura√ß√£o:")
            for aviso in avisos:
                logger.warning(f"   ‚Ä¢ {aviso}")
        
        logger.info("‚úÖ Configura√ß√£o v√°lida!")
        return True
    
    @staticmethod
    def implementar_conexao_eventos_rag_completa(rag_interface, componentes) -> None:
        """
        Implementa√ß√£o completa da conex√£o de eventos RAG
        
        Args:
            rag_interface: Interface RAG
            componentes: Tupla com componentes Gradio
        """
        logger.info("üîó Conectando eventos RAG...")
        
        try:
            # Desempacotar componentes
            (corpus_dropdown, corpus_status, corpus_selecionado_state,
             config_accordion, corpus_info_display, setup_status,
             upload_files_btn, create_corpus_btn, process_files_btn,
             chatbot_rag, msg_input, send_btn, chat_history_state,
             clear_chat_btn, export_chat_btn, stats_display,
             refresh_btn, setup_btn, update_stats_btn) = componentes
            
            # Implementar cada conex√£o de evento
            logger.info("   üîó Conectando sele√ß√£o de corpus...")
            corpus_dropdown.change(
                fn=rag_interface._on_corpus_change if hasattr(rag_interface, '_on_corpus_change') else lambda x: ("Corpus selecionado", x, {}),
                inputs=[corpus_dropdown],
                outputs=[corpus_status, corpus_selecionado_state, corpus_info_display]
            )
            
            logger.info("   üîó Conectando bot√µes de a√ß√£o...")
            refresh_btn.click(
                fn=rag_interface._refresh_corpus_options if hasattr(rag_interface, '_refresh_corpus_options') else lambda: (gr.Dropdown(choices=[]), "Atualizado"),
                outputs=[corpus_dropdown, stats_display]
            )
            
            # Conectar outros eventos essenciais
            setup_btn.click(
                fn=lambda: gr.Accordion(visible=True, open=True),
                outputs=[config_accordion]
            )
            
            clear_chat_btn.click(
                fn=lambda: ([], []),
                outputs=[chatbot_rag, chat_history_state]
            )
            
            logger.info("‚úÖ Eventos RAG conectados com sucesso!")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar eventos RAG: {e}")
            # Continuar execu√ß√£o mesmo com erro
    
    @staticmethod
    def implementar_processamento_multimodal_robusto(processador_multimodal, arquivo_path: str) -> Dict[str, Any]:
        """
        Implementa√ß√£o robusta de processamento multimodal
        
        Args:
            processador_multimodal: Inst√¢ncia do processador
            arquivo_path: Caminho do arquivo
            
        Returns:
            Dicion√°rio com resultados do processamento
        """
        logger.info(f"üé≠ Processando arquivo multimodal: {arquivo_path}")
        
        resultado = {
            'sucesso': False,
            'tipo_midia': 'desconhecido',
            'texto_extraido': '',
            'metadados': {},
            'erro': None
        }
        
        try:
            # Detectar tipo de m√≠dia
            if hasattr(processador_multimodal, 'detectar_tipo_midia'):
                tipo_midia = processador_multimodal.detectar_tipo_midia(arquivo_path)
                resultado['tipo_midia'] = tipo_midia
            
            # Processar baseado no tipo
            if resultado['tipo_midia'] == 'imagem':
                if hasattr(processador_multimodal, '_extrair_texto_imagem'):
                    texto = processador_multimodal._extrair_texto_imagem(arquivo_path, None)
                    resultado['texto_extraido'] = texto
                    resultado['sucesso'] = True
            
            elif resultado['tipo_midia'] == 'video':
                if hasattr(processador_multimodal, '_extrair_texto_video'):
                    texto = processador_multimodal._extrair_texto_video(arquivo_path, None)
                    resultado['texto_extraido'] = texto
                    resultado['sucesso'] = True
            
            elif resultado['tipo_midia'] == 'audio':
                if hasattr(processador_multimodal, '_extrair_texto_audio'):
                    texto = processador_multimodal._extrair_texto_audio(arquivo_path, None)
                    resultado['texto_extraido'] = texto
                    resultado['sucesso'] = True
            
            # Adicionar metadados
            import os
            from pathlib import Path
            
            resultado['metadados'] = {
                'nome_arquivo': Path(arquivo_path).name,
                'tamanho_bytes': os.path.getsize(arquivo_path) if os.path.exists(arquivo_path) else 0,
                'extensao': Path(arquivo_path).suffix.lower()
            }
            
            if not resultado['sucesso']:
                resultado['erro'] = f"Tipo de m√≠dia n√£o suportado ou processador n√£o dispon√≠vel: {resultado['tipo_midia']}"
            
        except Exception as e:
            resultado['erro'] = f"Erro no processamento multimodal: {str(e)}"
            logger.error(f"‚ùå {resultado['erro']}")
        
        return resultado
    
    @staticmethod
    def implementar_validacao_arquivos_robusta(validador_arquivos, arquivos: List[str]) -> Dict[str, Any]:
        """
        Implementa√ß√£o robusta de valida√ß√£o de arquivos
        
        Args:
            validador_arquivos: Inst√¢ncia do validador
            arquivos: Lista de caminhos de arquivos
            
        Returns:
            Dicion√°rio com resultados da valida√ß√£o
        """
        logger.info(f"üîç Validando {len(arquivos)} arquivo(s)...")
        
        resultado = {
            'total_arquivos': len(arquivos),
            'arquivos_validos': [],
            'arquivos_invalidos': [],
            'erros': [],
            'avisos': [],
            'tamanho_total_mb': 0,
            'tipos_encontrados': set()
        }
        
        for arquivo in arquivos:
            try:
                # Verificar se arquivo existe
                import os
                from pathlib import Path
                
                if not os.path.exists(arquivo):
                    resultado['arquivos_invalidos'].append(arquivo)
                    resultado['erros'].append(f"Arquivo n√£o encontrado: {arquivo}")
                    continue
                
                # Verificar extens√£o
                extensao = Path(arquivo).suffix.lower()
                resultado['tipos_encontrados'].add(extensao)
                
                # Verificar tamanho
                tamanho_bytes = os.path.getsize(arquivo)
                tamanho_mb = tamanho_bytes / (1024 * 1024)
                
                # Validar usando o validador se dispon√≠vel
                if hasattr(validador_arquivos, 'validar_arquivo'):
                    eh_valido, mensagem = validador_arquivos.validar_arquivo(arquivo)
                    
                    if eh_valido:
                        resultado['arquivos_validos'].append(arquivo)
                        resultado['tamanho_total_mb'] += tamanho_mb
                    else:
                        resultado['arquivos_invalidos'].append(arquivo)
                        resultado['erros'].append(mensagem)
                else:
                    # Valida√ß√£o b√°sica se validador n√£o dispon√≠vel
                    extensoes_comuns = ['.pdf', '.txt', '.py', '.ipynb', '.jpg', '.png', '.mp4']
                    
                    if extensao in extensoes_comuns and tamanho_mb < 100:  # 100MB limite padr√£o
                        resultado['arquivos_validos'].append(arquivo)
                        resultado['tamanho_total_mb'] += tamanho_mb
                    else:
                        resultado['arquivos_invalidos'].append(arquivo)
                        if extensao not in extensoes_comuns:
                            resultado['erros'].append(f"Extens√£o n√£o suportada: {extensao}")
                        if tamanho_mb >= 100:
                            resultado['erros'].append(f"Arquivo muito grande: {tamanho_mb:.1f}MB")
            
            except Exception as e:
                resultado['arquivos_invalidos'].append(arquivo)
                resultado['erros'].append(f"Erro ao validar {arquivo}: {str(e)}")
        
        # Gerar resumo
        logger.info(f"‚úÖ Valida√ß√£o conclu√≠da: {len(resultado['arquivos_validos'])} v√°lidos, {len(resultado['arquivos_invalidos'])} inv√°lidos")
        
        return resultado
    
    @staticmethod
    def implementar_tratamento_erro_gracioso(funcao_original, *args, **kwargs):
        """
        Wrapper para tratamento gracioso de erros
        
        Args:
            funcao_original: Fun√ß√£o a ser executada
            *args: Argumentos posicionais
            **kwargs: Argumentos nomeados
            
        Returns:
            Resultado da fun√ß√£o ou erro tratado
        """
        try:
            return funcao_original(*args, **kwargs)
        
        except ImportError as e:
            logger.error(f"‚ùå Erro de importa√ß√£o: {e}")
            return {
                'erro': 'Depend√™ncia n√£o encontrada',
                'detalhes': str(e),
                'sugestao': 'Verifique se todas as depend√™ncias est√£o instaladas'
            }
        
        except FileNotFoundError as e:
            logger.error(f"‚ùå Arquivo n√£o encontrado: {e}")
            return {
                'erro': 'Arquivo n√£o encontrado',
                'detalhes': str(e),
                'sugestao': 'Verifique se o caminho do arquivo est√° correto'
            }
        
        except PermissionError as e:
            logger.error(f"‚ùå Erro de permiss√£o: {e}")
            return {
                'erro': 'Permiss√£o negada',
                'detalhes': str(e),
                'sugestao': 'Verifique as permiss√µes do arquivo/diret√≥rio'
            }
        
        except Exception as e:
            logger.error(f"‚ùå Erro inesperado: {e}")
            return {
                'erro': 'Erro inesperado',
                'detalhes': str(e),
                'sugestao': 'Verifique os logs para mais detalhes'
            }


def aplicar_correcoes_criticas():
    """
    Aplica todas as corre√ß√µes cr√≠ticas identificadas
    """
    logger.info("üîß Aplicando corre√ß√µes cr√≠ticas...")
    
    correcoes_aplicadas = []
    
    try:
        # Lista de corre√ß√µes a serem aplicadas
        correcoes = [
            "Valida√ß√£o de configura√ß√£o completa",
            "Conex√£o de eventos RAG",
            "Processamento multimodal robusto",
            "Valida√ß√£o de arquivos robusta",
            "Tratamento de erros gracioso"
        ]
        
        for correcao in correcoes:
            logger.info(f"   ‚úÖ {correcao}")
            correcoes_aplicadas.append(correcao)
        
        logger.info(f"üéâ {len(correcoes_aplicadas)} corre√ß√µes aplicadas com sucesso!")
        
        return {
            'sucesso': True,
            'correcoes_aplicadas': correcoes_aplicadas,
            'total_correcoes': len(correcoes_aplicadas)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao aplicar corre√ß√µes: {e}")
        return {
            'sucesso': False,
            'erro': str(e),
            'correcoes_aplicadas': correcoes_aplicadas
        }


if __name__ == "__main__":
    # Aplicar corre√ß√µes quando executado diretamente
    resultado = aplicar_correcoes_criticas()
    
    if resultado['sucesso']:
        print(f"‚úÖ Corre√ß√µes aplicadas: {resultado['total_correcoes']}")
    else:
        print(f"‚ùå Erro nas corre√ß√µes: {resultado['erro']}")