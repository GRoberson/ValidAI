#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé≠ Demonstra√ß√£o do Sistema RAG Multimodal

Script para demonstrar as capacidades multimodais do ValidAI Enhanced,
incluindo processamento de imagens, v√≠deos e √°udios.
"""

import os
import sys
import time
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Imports do sistema RAG multimodal
from validai_rag_multimodal import (
    ValidAIRAGMultimodal, 
    ProcessadorMultimodal,
    criar_configuracao_rag_multimodal
)


def demonstrar_processamento_multimodal():
    """
    Demonstra o processamento de diferentes tipos de m√≠dia
    """
    print("\n" + "="*70)
    print("üé≠ Demonstra√ß√£o do Sistema RAG Multimodal")
    print("="*70)
    
    try:
        # 1. Configura√ß√£o
        print("\nüîß 1. Configurando sistema multimodal...")
        config = criar_configuracao_rag_multimodal()
        
        # Ajustar configura√ß√µes
        config.update({
            'project_id': os.getenv('VALIDAI_PROJECT_ID', 'bv-cdip-des'),
            'bucket_name': os.getenv('VALIDAI_RAG_BUCKET', 'validai-rag-multimodal')
        })
        
        print(f"   ‚Ä¢ Projeto: {config['project_id']}")
        print(f"   ‚Ä¢ Bucket: {config['bucket_name']}")
        print(f"   ‚Ä¢ Modelo Vision: {config['modelo_vision']}")
        
        # 2. Inicializar sistema
        print("\nüé≠ 2. Inicializando sistema RAG multimodal...")
        rag_multimodal = ValidAIRAGMultimodal(config)
        
        # 3. Inicializar processador
        print("\nüé® 3. Inicializando processador de m√≠dia...")
        processador = ProcessadorMultimodal(config)
        
        # 4. Listar corpus multimodais
        print("\nüìã 4. Corpus multimodais dispon√≠veis:")
        for corpus_id, config_corpus in rag_multimodal.corpus_configs.items():
            status = "‚úÖ" if config_corpus.suporte_multimodal else "üìÑ"
            print(f"   {status} {config_corpus.nome}")
            print(f"      Tipos texto: {config_corpus.tipos_arquivo}")
            print(f"      Tipos m√≠dia: {config_corpus.tipos_multimodal[:5]}...")
        
        # 5. Demonstrar detec√ß√£o de tipos
        print("\nüîç 5. Demonstrando detec√ß√£o de tipos de m√≠dia:")
        
        arquivos_exemplo = [
            "exemplo.jpg", "apresentacao.mp4", "audio.mp3", 
            "documento.pdf", "planilha.xlsx", "video.avi"
        ]
        
        for arquivo in arquivos_exemplo:
            tipo = processador.detectar_tipo_midia(arquivo)
            print(f"   üìÅ {arquivo} ‚Üí {tipo}")
        
        # 6. Demonstrar capacidades por tipo
        print("\nüéØ 6. Capacidades por tipo de m√≠dia:")
        
        print("\n   üì∏ IMAGENS:")
        print("      ‚Ä¢ Extra√ß√£o de texto (OCR)")
        print("      ‚Ä¢ An√°lise de gr√°ficos e dashboards")
        print("      ‚Ä¢ Interpreta√ß√£o de diagramas")
        print("      ‚Ä¢ Descri√ß√£o detalhada do conte√∫do")
        
        print("\n   üé• V√çDEOS:")
        print("      ‚Ä¢ An√°lise de apresenta√ß√µes")
        print("      ‚Ä¢ Extra√ß√£o de slides e texto")
        print("      ‚Ä¢ Transcri√ß√£o de narra√ß√£o")
        print("      ‚Ä¢ Identifica√ß√£o de momentos importantes")
        
        print("\n   üéµ √ÅUDIOS:")
        print("      ‚Ä¢ Transcri√ß√£o de fala")
        print("      ‚Ä¢ An√°lise de treinamentos")
        print("      ‚Ä¢ Extra√ß√£o de insights t√©cnicos")
        print("      ‚Ä¢ Identifica√ß√£o de conceitos")
        
        # 7. Simular processamento de corpus
        corpus_exemplo = "apresentacoes_validacao"
        print(f"\nüìö 7. Simulando processamento do corpus: {corpus_exemplo}")
        
        if corpus_exemplo in rag_multimodal.corpus_configs:
            config_corpus = rag_multimodal.corpus_configs[corpus_exemplo]
            
            print(f"   üìÅ Diret√≥rio: {config_corpus.diretorio_local}")
            print(f"   üé≠ Suporte multimodal: {config_corpus.suporte_multimodal}")
            
            # Verificar se diret√≥rio existe
            if os.path.exists(config_corpus.diretorio_local):
                print("   ‚úÖ Diret√≥rio encontrado")
                
                # Simular processamento
                try:
                    estatisticas = rag_multimodal.processar_arquivos_multimodais(corpus_exemplo)
                    
                    print(f"\n   üìä Estat√≠sticas do processamento:")
                    print(f"      ‚Ä¢ Total de arquivos: {estatisticas['total_arquivos']}")
                    print(f"      ‚Ä¢ Arquivos de texto: {estatisticas['arquivos_texto']}")
                    print(f"      ‚Ä¢ Imagens: {estatisticas['arquivos_imagem']}")
                    print(f"      ‚Ä¢ V√≠deos: {estatisticas['arquivos_video']}")
                    print(f"      ‚Ä¢ √Åudios: {estatisticas['arquivos_audio']}")
                    print(f"      ‚Ä¢ Processados: {estatisticas['arquivos_processados']}")
                    print(f"      ‚Ä¢ Erros: {estatisticas['erros']}")
                    
                    # Mostrar alguns textos extra√≠dos
                    if estatisticas['textos_extraidos']:
                        print(f"\n   üìù Exemplos de textos extra√≠dos:")
                        for i, item in enumerate(estatisticas['textos_extraidos'][:2]):
                            print(f"      {i+1}. {Path(item['arquivo']).name} ({item['tipo']})")
                            texto_resumido = item['texto'][:100] + "..." if len(item['texto']) > 100 else item['texto']
                            print(f"         {texto_resumido}")
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Simula√ß√£o de processamento: {e}")
            else:
                print(f"   ‚ö†Ô∏è Diret√≥rio n√£o existe: {config_corpus.diretorio_local}")
                print("   üí° Crie o diret√≥rio e adicione arquivos multimodais para testar")
        
        # 8. Demonstrar consultas multimodais
        print(f"\nüí¨ 8. Exemplos de consultas multimodais:")
        
        consultas_exemplo = [
            "Mostre-me gr√°ficos de performance de modelos",
            "Quais s√£o os principais pontos da apresenta√ß√£o sobre valida√ß√£o?",
            "H√° algum v√≠deo explicando o processo de monitoramento?",
            "Que informa√ß√µes visuais temos sobre riscos de mercado?",
            "Transcreva o √°udio da reuni√£o sobre metodologias"
        ]
        
        for i, consulta in enumerate(consultas_exemplo, 1):
            print(f"   {i}. \"{consulta}\"")
            print(f"      ‚Üí Busca em textos, imagens, v√≠deos e √°udios")
        
        # 9. Vantagens do sistema multimodal
        print(f"\nüåü 9. Vantagens do sistema multimodal:")
        print("   ‚úÖ An√°lise completa de documentos com elementos visuais")
        print("   ‚úÖ Extra√ß√£o de informa√ß√µes de apresenta√ß√µes em v√≠deo")
        print("   ‚úÖ Transcri√ß√£o e an√°lise de treinamentos em √°udio")
        print("   ‚úÖ Interpreta√ß√£o de gr√°ficos e dashboards")
        print("   ‚úÖ Consultas contextuais sobre qualquer tipo de m√≠dia")
        print("   ‚úÖ Base de conhecimento verdadeiramente multimodal")
        
        # 10. Pr√≥ximos passos
        print(f"\nüöÄ 10. Como usar o sistema multimodal:")
        print("   1. Execute: python validai_enhanced_multimodal.py")
        print("   2. Configure os corpus multimodais")
        print("   3. Adicione arquivos de m√≠dia aos diret√≥rios")
        print("   4. Processe os corpus usando a interface")
        print("   5. Fa√ßa consultas multimodais no chat")
        
        print("\n‚úÖ Demonstra√ß√£o conclu√≠da!")
        print("\nüí° O sistema RAG multimodal oferece capacidades √∫nicas:")
        print("   ‚Ä¢ An√°lise de imagens com Gemini Vision")
        print("   ‚Ä¢ Processamento de v√≠deos e √°udios")
        print("   ‚Ä¢ Extra√ß√£o inteligente de conte√∫do")
        print("   ‚Ä¢ Consultas contextuais avan√ßadas")
        
    except Exception as e:
        print(f"\n‚ùå Erro na demonstra√ß√£o: {e}")
        print("\nüîß Verifique:")
        print("   ‚Ä¢ Configura√ß√µes do Google Cloud")
        print("   ‚Ä¢ Permiss√µes do Vertex AI e Gemini")
        print("   ‚Ä¢ Conectividade com a internet")


def criar_estrutura_exemplo():
    """Cria estrutura de exemplo para testar o sistema multimodal"""
    print("\nüìÅ Criando estrutura de exemplo...")
    
    diretorios_exemplo = [
        "base_conhecimento/ins_multimodal",
        "base_conhecimento/apresentacoes", 
        "base_conhecimento/graficos",
        "base_conhecimento/casos_visuais",
        "base_conhecimento/treinamentos_audio",
        "base_conhecimento/documentos_visuais"
    ]
    
    for diretorio in diretorios_exemplo:
        Path(diretorio).mkdir(parents=True, exist_ok=True)
        
        # Criar README em cada diret√≥rio
        readme_path = Path(diretorio) / "README.md"
        readme_content = f"""# {Path(diretorio).name.replace('_', ' ').title()}

Este diret√≥rio √© para arquivos multimodais do ValidAI Enhanced.

## Tipos de arquivo suportados:

### Documentos:
- PDF, DOCX, PPTX, TXT, MD

### Imagens:
- JPG, PNG, GIF, BMP, WebP, TIFF

### V√≠deos:
- MP4, AVI, MOV, WMV, WebM, MKV

### √Åudios:
- MP3, WAV, FLAC, AAC, OGG, M4A

## Como usar:
1. Coloque seus arquivos neste diret√≥rio
2. Execute o setup do corpus RAG multimodal
3. Use no ValidAI Enhanced Multimodal

Criado automaticamente pelo sistema de demonstra√ß√£o.
"""
        
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        print(f"   ‚úÖ {diretorio}")
    
    print("‚úÖ Estrutura de exemplo criada!")


def verificar_prerequisitos_multimodal():
    """Verifica pr√©-requisitos para o sistema multimodal"""
    print("üîç Verificando pr√©-requisitos multimodais...")
    
    # Verificar imports
    try:
        import google.genai
        import vertexai
        from google.cloud import storage
        print("   ‚úÖ Bibliotecas Google Cloud OK")
    except ImportError as e:
        print(f"   ‚ùå Biblioteca faltando: {e}")
        return False
    
    # Verificar arquivos do sistema
    arquivos_necessarios = [
        'validai_rag_multimodal.py',
        'rag_multimodal_config.json'
    ]
    
    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"   ‚úÖ {arquivo}")
        else:
            print(f"   ‚ùå Arquivo faltando: {arquivo}")
            return False
    
    # Verificar configura√ß√£o
    project_id = os.getenv('VALIDAI_PROJECT_ID', 'bv-cdip-des')
    print(f"   ‚ÑπÔ∏è Projeto: {project_id}")
    
    return True


def main():
    """Fun√ß√£o principal"""
    print("\n" + "="*70)
    print("üé≠ Demonstra√ß√£o RAG Multimodal - ValidAI Enhanced")
    print("="*70)
    
    # Verificar pr√©-requisitos
    if not verificar_prerequisitos_multimodal():
        print("\n‚ùå Pr√©-requisitos n√£o atendidos")
        return 1
    
    # Menu de op√ß√µes
    print("\nüìã Op√ß√µes dispon√≠veis:")
    print("1. üé≠ Demonstra√ß√£o completa do sistema multimodal")
    print("2. üìÅ Criar estrutura de exemplo")
    print("3. üîç Apenas verificar pr√©-requisitos")
    
    try:
        opcao = input("\nEscolha uma op√ß√£o (1-3): ").strip()
        
        if opcao == "1":
            # Confirmar execu√ß√£o
            print("\n‚ö†Ô∏è Esta demonstra√ß√£o ir√°:")
            print("   ‚Ä¢ Conectar com Google Cloud")
            print("   ‚Ä¢ Inicializar sistema multimodal")
            print("   ‚Ä¢ Simular processamento de m√≠dia")
            
            resposta = input("\nContinuar? (s/N): ").lower().strip()
            if resposta in ['s', 'sim', 'y', 'yes']:
                demonstrar_processamento_multimodal()
            else:
                print("Demonstra√ß√£o cancelada.")
        
        elif opcao == "2":
            criar_estrutura_exemplo()
        
        elif opcao == "3":
            print("‚úÖ Pr√©-requisitos verificados!")
        
        else:
            print("Op√ß√£o inv√°lida.")
            return 1
        
        return 0
        
    except KeyboardInterrupt:
        print("\n\nüëã Demonstra√ß√£o interrompida")
        return 0
    except Exception as e:
        print(f"\nüí• Erro inesperado: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())