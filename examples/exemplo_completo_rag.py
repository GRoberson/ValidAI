#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìö Exemplo Completo do Sistema RAG ValidAI

Este script demonstra como usar o sistema RAG avan√ßado do ValidAI
de forma program√°tica, incluindo setup, configura√ß√£o e consultas.
"""

import os
import sys
import time
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Imports do sistema RAG
from validai_rag_system import (
    ValidAIRAGManager, 
    ValidAIRAGInterface, 
    criar_configuracao_rag_padrao
)


def demonstrar_sistema_rag():
    """
    Demonstra√ß√£o completa do sistema RAG
    """
    print("\n" + "="*70)
    print("üìö Demonstra√ß√£o do Sistema RAG ValidAI Enhanced")
    print("="*70)
    
    try:
        # 1. Configura√ß√£o inicial
        print("\nüîß 1. Configurando sistema RAG...")
        config = criar_configuracao_rag_padrao()
        
        # Ajustar configura√ß√µes se necess√°rio
        config.update({
            'project_id': os.getenv('VALIDAI_PROJECT_ID', 'bv-cdip-des'),
            'bucket_name': os.getenv('VALIDAI_RAG_BUCKET', 'validai-rag-bucket')
        })
        
        print(f"   ‚Ä¢ Projeto: {config['project_id']}")
        print(f"   ‚Ä¢ Bucket: {config['bucket_name']}")
        print(f"   ‚Ä¢ Modelo: {config['modelo_ia']}")
        
        # 2. Inicializar gerenciador RAG
        print("\nüß† 2. Inicializando gerenciador RAG...")
        rag_manager = ValidAIRAGManager(config)
        
        # 3. Criar interface
        print("\nüé® 3. Criando interface RAG...")
        rag_interface = ValidAIRAGInterface(rag_manager)
        
        # 4. Listar corpus dispon√≠veis
        print("\nüìã 4. Corpus dispon√≠veis:")
        corpus_info = rag_manager.listar_corpus_disponiveis()
        
        for info in corpus_info:
            status = "‚úÖ" if info['tem_arquivos'] else "‚ö†Ô∏è"
            print(f"   {status} {info['nome']}")
            print(f"      ID: {info['id']}")
            print(f"      Descri√ß√£o: {info['descricao']}")
        
        # 5. Verificar arquivos de um corpus espec√≠fico
        corpus_exemplo = "instrucoes_normativas"
        print(f"\nüîç 5. Verificando arquivos do corpus: {corpus_exemplo}")
        
        try:
            info_arquivos = rag_manager.verificar_arquivos_corpus(corpus_exemplo)
            print(f"   ‚Ä¢ Arquivos v√°lidos: {info_arquivos['arquivos_validos']}")
            print(f"   ‚Ä¢ Tamanho total: {info_arquivos['tamanho_total_mb']:.1f} MB")
            print(f"   ‚Ä¢ Tipos encontrados: {info_arquivos['tipos_encontrados']}")
            print(f"   ‚Ä¢ Status: {info_arquivos['status']}")
            
            if info_arquivos['arquivos_validos'] == 0:
                print("\nüí° Dica: Adicione documentos PDF, TXT ou MD no diret√≥rio:")
                print(f"   {rag_manager.corpus_configs[corpus_exemplo].diretorio_local}")
                return
            
        except Exception as e:
            print(f"   ‚ùå Erro ao verificar arquivos: {e}")
            return
        
        # 6. Demonstrar fluxo completo (se arquivos dispon√≠veis)
        if info_arquivos['arquivos_validos'] > 0:
            print(f"\nüöÄ 6. Demonstrando fluxo completo para: {corpus_exemplo}")
            
            # 6.1 Upload de arquivos
            print("\nüì§ 6.1 Enviando arquivos para Google Cloud...")
            try:
                enviados, ignorados = rag_manager.enviar_arquivos_corpus(corpus_exemplo)
                print(f"   ‚úÖ Enviados: {enviados}, Ignorados: {ignorados}")
            except Exception as e:
                print(f"   ‚ùå Erro no upload: {e}")
                return
            
            # 6.2 Criar corpus RAG
            print("\nüß† 6.2 Criando corpus no Vertex AI...")
            try:
                corpus_name = rag_manager.criar_corpus_rag(corpus_exemplo)
                print(f"   ‚úÖ Corpus criado: {corpus_name}")
            except Exception as e:
                print(f"   ‚ùå Erro ao criar corpus: {e}")
                return
            
            # 6.3 Processar arquivos
            print("\nüìö 6.3 Processando arquivos (pode demorar alguns minutos)...")
            try:
                rag_manager.processar_arquivos_corpus(corpus_exemplo)
                print("   ‚úÖ Processamento iniciado")
                
                # Aguardar um pouco para o processamento
                print("   ‚è≥ Aguardando processamento inicial...")
                time.sleep(30)  # Aguardar 30 segundos
                
            except Exception as e:
                print(f"   ‚ùå Erro no processamento: {e}")
                return
            
            # 6.4 Criar ferramenta de busca
            print("\nüîß 6.4 Criando ferramenta de busca...")
            try:
                ferramenta = rag_manager.criar_ferramenta_busca(corpus_exemplo)
                print("   ‚úÖ Ferramenta de busca criada")
            except Exception as e:
                print(f"   ‚ùå Erro ao criar ferramenta: {e}")
                return
            
            # 6.5 Fazer consultas de exemplo
            print("\nüí¨ 6.5 Fazendo consultas de exemplo...")
            
            perguntas_exemplo = [
                "Qual √© o processo de valida√ß√£o de modelos?",
                "Quais s√£o os principais riscos em modelos de ML?",
                "Como deve ser feito o monitoramento de modelos?",
                "Quais s√£o as responsabilidades da √°rea de valida√ß√£o?"
            ]
            
            for i, pergunta in enumerate(perguntas_exemplo, 1):
                print(f"\n‚ùì Pergunta {i}: {pergunta}")
                
                try:
                    # Usar interface para consulta
                    rag_interface.selecionar_corpus(corpus_exemplo)
                    resposta = rag_interface.processar_consulta(pergunta)
                    
                    # Mostrar resposta resumida
                    resposta_resumida = resposta[:200] + "..." if len(resposta) > 200 else resposta
                    print(f"ü§ñ Resposta: {resposta_resumida}")
                    
                except Exception as e:
                    print(f"   ‚ùå Erro na consulta: {e}")
                
                # Pequena pausa entre consultas
                time.sleep(2)
        
        # 7. Estat√≠sticas finais
        print("\nüìä 7. Estat√≠sticas finais:")
        try:
            stats = rag_manager.obter_estatisticas_corpus(corpus_exemplo)
            print(f"   ‚Ä¢ Nome: {stats['nome']}")
            print(f"   ‚Ä¢ Corpus criado: {stats['corpus_criado']}")
            print(f"   ‚Ä¢ Ferramenta dispon√≠vel: {stats['ferramenta_disponivel']}")
            print(f"   ‚Ä¢ Arquivos v√°lidos: {stats['arquivos_validos']}")
        except Exception as e:
            print(f"   ‚ùå Erro ao obter estat√≠sticas: {e}")
        
        print("\n‚úÖ Demonstra√ß√£o conclu√≠da com sucesso!")
        print("\nüí° Pr√≥ximos passos:")
        print("   1. Execute o ValidAI Enhanced com RAG: python validai_enhanced_with_rag.py")
        print("   2. Use a interface gr√°fica para configurar outros corpus")
        print("   3. Adicione mais documentos √†s bases de conhecimento")
        
    except Exception as e:
        print(f"\n‚ùå Erro na demonstra√ß√£o: {e}")
        print("\nüîß Verifique:")
        print("   ‚Ä¢ Configura√ß√µes do Google Cloud")
        print("   ‚Ä¢ Permiss√µes do Vertex AI")
        print("   ‚Ä¢ Conectividade com a internet")


def verificar_prerequisitos():
    """Verifica se os pr√©-requisitos est√£o atendidos"""
    print("üîç Verificando pr√©-requisitos...")
    
    # Verificar imports
    try:
        import google.genai
        import vertexai
        from google.cloud import storage
        print("   ‚úÖ Bibliotecas Google Cloud OK")
    except ImportError as e:
        print(f"   ‚ùå Biblioteca faltando: {e}")
        return False
    
    # Verificar configura√ß√£o
    project_id = os.getenv('VALIDAI_PROJECT_ID', 'bv-cdip-des')
    if project_id == 'bv-cdip-des':
        print("   ‚ö†Ô∏è Usando projeto padr√£o. Configure VALIDAI_PROJECT_ID se necess√°rio.")
    else:
        print(f"   ‚úÖ Projeto configurado: {project_id}")
    
    # Verificar estrutura de arquivos
    arquivos_necessarios = [
        'validai_rag_system.py',
        'rag_corpus_config.json'
    ]
    
    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"   ‚úÖ {arquivo}")
        else:
            print(f"   ‚ùå Arquivo faltando: {arquivo}")
            return False
    
    return True


def main():
    """Fun√ß√£o principal"""
    print("\n" + "="*70)
    print("üöÄ Exemplo Completo - Sistema RAG ValidAI Enhanced")
    print("="*70)
    
    # Verificar pr√©-requisitos
    if not verificar_prerequisitos():
        print("\n‚ùå Pr√©-requisitos n√£o atendidos. Verifique a instala√ß√£o.")
        return 1
    
    # Confirmar execu√ß√£o
    print("\n‚ö†Ô∏è Esta demonstra√ß√£o ir√°:")
    print("   ‚Ä¢ Conectar com Google Cloud")
    print("   ‚Ä¢ Criar recursos no Vertex AI")
    print("   ‚Ä¢ Fazer upload de arquivos")
    print("   ‚Ä¢ Processar documentos")
    
    resposta = input("\nContinuar? (s/N): ").lower().strip()
    if resposta not in ['s', 'sim', 'y', 'yes']:
        print("Demonstra√ß√£o cancelada.")
        return 0
    
    # Executar demonstra√ß√£o
    try:
        demonstrar_sistema_rag()
        return 0
    except KeyboardInterrupt:
        print("\n\nüëã Demonstra√ß√£o interrompida pelo usu√°rio")
        return 0
    except Exception as e:
        print(f"\nüí• Erro inesperado: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())