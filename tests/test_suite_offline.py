#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ Su√≠te de Testes Offline - ValidAI Enhanced

Testes abrangentes que podem ser executados sem acesso ao Vertex AI,
focando em componentes locais, valida√ß√µes e l√≥gica de neg√≥cio.
"""

import os
import sys
import json
import tempfile
import unittest
from unittest.mock import Mock, patch, MagicMock
from pathlib import Path
from typing import Dict, Any, List
import logging

# Configurar logging para testes
logging.basicConfig(level=logging.WARNING)

# Adicionar diret√≥rio do projeto ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


class TestConfiguracao(unittest.TestCase):
    """
    üîß Testes de Configura√ß√£o
    
    Testa carregamento, valida√ß√£o e manipula√ß√£o de configura√ß√µes
    sem depend√™ncias externas.
    """
    
    def setUp(self):
        """Configura√ß√£o inicial para cada teste"""
        self.temp_dir = tempfile.mkdtemp()
        self.config_file = os.path.join(self.temp_dir, "test_config.json")
        
    def tearDown(self):
        """Limpeza ap√≥s cada teste"""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_config_padrao(self):
        """Testa cria√ß√£o de configura√ß√£o padr√£o"""
        try:
            from validai_enhanced import ConfigValidAI
            
            config = ConfigValidAI()
            
            # Verificar valores padr√£o
            self.assertEqual(config.project_id, "bv-cdip-des")
            self.assertEqual(config.location, "us-central1")
            self.assertEqual(config.modelo_versao, "gemini-1.5-pro-002")
            self.assertEqual(config.temperatura, 0.2)
            self.assertIsInstance(config.extensoes_permitidas, list)
            
            print("‚úÖ Configura√ß√£o padr√£o criada corretamente")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")
    
    def test_carregamento_config_json(self):
        """Testa carregamento de configura√ß√£o de arquivo JSON"""
        try:
            from validai_enhanced import GerenciadorConfig
            
            # Criar arquivo de configura√ß√£o de teste
            config_data = {
                "project_id": "test-project",
                "temperatura": 0.5,
                "max_output_tokens": 4000
            }
            
            with open(self.config_file, 'w') as f:
                json.dump(config_data, f)
            
            # Testar carregamento
            gerenciador = GerenciadorConfig(self.config_file)
            
            self.assertEqual(gerenciador.config.project_id, "test-project")
            self.assertEqual(gerenciador.config.temperatura, 0.5)
            self.assertEqual(gerenciador.config.max_output_tokens, 4000)
            
            print("‚úÖ Carregamento de JSON funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")
    
    def test_validacao_configuracao(self):
        """Testa valida√ß√£o de configura√ß√µes"""
        try:
            from validai_enhanced import ConfigValidAI, GerenciadorConfig
            
            # Configura√ß√£o v√°lida
            config_valida = ConfigValidAI(
                project_id="test-project",
                temperatura=0.5,
                max_output_tokens=1000
            )
            
            gerenciador = GerenciadorConfig()
            gerenciador.config = config_valida
            
            # Mock dos diret√≥rios para evitar cria√ß√£o real
            with patch('os.makedirs'):
                resultado = gerenciador.validar_configuracao()
                self.assertTrue(resultado)
            
            print("‚úÖ Valida√ß√£o de configura√ß√£o funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")


class TestValidadorArquivos(unittest.TestCase):
    """
    üìÅ Testes de Valida√ß√£o de Arquivos
    
    Testa valida√ß√£o de tipos, tamanhos e integridade de arquivos
    sem processamento real.
    """
    
    def setUp(self):
        """Configura√ß√£o inicial"""
        self.temp_dir = tempfile.mkdtemp()
        
    def tearDown(self):
        """Limpeza"""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_validacao_extensoes(self):
        """Testa valida√ß√£o de extens√µes de arquivo"""
        try:
            from validai_enhanced import ValidadorArquivos, ConfigValidAI
            
            config = ConfigValidAI()
            validador = ValidadorArquivos(config)
            
            # Criar arquivos de teste
            arquivo_valido = os.path.join(self.temp_dir, "test.pdf")
            arquivo_invalido = os.path.join(self.temp_dir, "test.exe")
            
            # Criar arquivos vazios
            Path(arquivo_valido).touch()
            Path(arquivo_invalido).touch()
            
            # Testar valida√ß√£o
            valido, msg_valido = validador.validar_arquivo(arquivo_valido)
            invalido, msg_invalido = validador.validar_arquivo(arquivo_invalido)
            
            self.assertTrue(valido)
            self.assertFalse(invalido)
            self.assertIn("v√°lido", msg_valido.lower())
            self.assertIn("suportado", msg_invalido.lower())
            
            print("‚úÖ Valida√ß√£o de extens√µes funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")
    
    def test_validacao_multiplos_arquivos(self):
        """Testa valida√ß√£o de m√∫ltiplos arquivos"""
        try:
            from validai_enhanced import ValidadorArquivos, ConfigValidAI
            
            config = ConfigValidAI()
            validador = ValidadorArquivos(config)
            
            # Criar arquivos de teste
            arquivos = []
            for i, ext in enumerate(['.pdf', '.py', '.txt', '.exe']):
                arquivo = os.path.join(self.temp_dir, f"test{i}{ext}")
                Path(arquivo).touch()
                arquivos.append(arquivo)
            
            # Testar valida√ß√£o m√∫ltipla
            resultado = validador.validar_multiplos_arquivos(arquivos)
            
            self.assertIsInstance(resultado, dict)
            self.assertIn('validos', resultado)
            self.assertIn('invalidos', resultado)
            self.assertEqual(resultado['total_validos'], 3)  # pdf, py, txt
            self.assertEqual(resultado['total_invalidos'], 1)  # exe
            
            print("‚úÖ Valida√ß√£o m√∫ltipla funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")


class TestFeedbackManager(unittest.TestCase):
    """
    üí¨ Testes do Gerenciador de Feedback
    
    Testa formata√ß√£o de mensagens e feedback humanizado.
    """
    
    def test_formatacao_mensagens(self):
        """Testa formata√ß√£o de diferentes tipos de mensagem"""
        try:
            from validai_enhanced import FeedbackManager
            
            feedback = FeedbackManager()
            
            # Testar diferentes tipos
            sucesso = feedback.sucesso("Opera√ß√£o conclu√≠da")
            erro = feedback.erro("Algo deu errado", "Tente novamente")
            aviso = feedback.aviso("Cuidado com isso")
            info = feedback.info("Informa√ß√£o √∫til")
            
            # Verificar formata√ß√£o
            self.assertIn("‚úÖ", sucesso)
            self.assertIn("‚ùå", erro)
            self.assertIn("‚ö†Ô∏è", aviso)
            self.assertIn("‚ÑπÔ∏è", info)
            
            # Verificar conte√∫do
            self.assertIn("Opera√ß√£o conclu√≠da", sucesso)
            self.assertIn("Algo deu errado", erro)
            self.assertIn("Tente novamente", erro)
            
            print("‚úÖ Formata√ß√£o de mensagens funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")
    
    def test_progresso_e_tempo(self):
        """Testa formata√ß√£o de progresso e tempo"""
        try:
            from validai_enhanced import FeedbackManager
            
            feedback = FeedbackManager()
            
            # Testar progresso
            progresso = feedback.progresso(5, 10, "Processando")
            self.assertIn("üìä", progresso)
            self.assertIn("5/10", progresso)
            self.assertIn("50.0%", progresso)
            
            # Testar tempo
            tempo = feedback.formatear_tempo_estimado(3661)  # 1h 1min 1s
            self.assertIn("1h", tempo)
            
            print("‚úÖ Formata√ß√£o de progresso e tempo funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")


class TestRAGConfiguracao(unittest.TestCase):
    """
    üß† Testes de Configura√ß√£o RAG
    
    Testa configura√ß√µes RAG sem conectar ao Vertex AI.
    """
    
    def test_corpus_config_basico(self):
        """Testa configura√ß√£o b√°sica de corpus"""
        try:
            from validai_rag_system import RAGCorpusConfig
            
            config = RAGCorpusConfig(
                nome="Teste",
                descricao="Corpus de teste",
                diretorio_local="./test",
                bucket_path="test/bucket",
                tipos_arquivo=[".pdf", ".txt"]
            )
            
            # Verificar propriedades
            self.assertEqual(config.nome, "Teste")
            self.assertEqual(config.descricao, "Corpus de teste")
            self.assertTrue(config.ativo)
            self.assertIsNone(config.corpus_id)
            
            # Testar convers√£o para dict
            config_dict = config.to_dict()
            self.assertIsInstance(config_dict, dict)
            self.assertEqual(config_dict['nome'], "Teste")
            
            print("‚úÖ Configura√ß√£o de corpus RAG funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")
    
    def test_corpus_multimodal_config(self):
        """Testa configura√ß√£o de corpus multimodal"""
        try:
            from validai_rag_multimodal import MultimodalRAGCorpusConfig
            
            config = MultimodalRAGCorpusConfig(
                nome="Teste Multimodal",
                descricao="Corpus multimodal de teste",
                diretorio_local="./test_mm",
                bucket_path="test/multimodal",
                tipos_arquivo=[".pdf"],
                suporte_multimodal=True
            )
            
            # Verificar propriedades multimodais
            self.assertTrue(config.suporte_multimodal)
            self.assertIsInstance(config.tipos_multimodal, list)
            
            # Testar detec√ß√£o de tipos
            self.assertTrue(config.eh_arquivo_texto("test.pdf"))
            self.assertTrue(config.eh_arquivo_multimodal("test.jpg"))
            self.assertFalse(config.eh_arquivo_multimodal("test.pdf"))
            
            print("‚úÖ Configura√ß√£o multimodal funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")


class TestProcessadorMultimodal(unittest.TestCase):
    """
    üé≠ Testes do Processador Multimodal
    
    Testa detec√ß√£o de tipos e processamento b√°sico sem IA.
    """
    
    def test_deteccao_tipos_midia(self):
        """Testa detec√ß√£o de tipos de m√≠dia"""
        try:
            from validai_rag_multimodal import ProcessadorMultimodal
            
            config = {'limite_video_mb': 100, 'limite_audio_mb': 50}
            processador = ProcessadorMultimodal(config)
            
            # Testar diferentes tipos
            self.assertEqual(processador.detectar_tipo_midia("foto.jpg"), "imagem")
            self.assertEqual(processador.detectar_tipo_midia("video.mp4"), "video")
            self.assertEqual(processador.detectar_tipo_midia("audio.mp3"), "audio")
            self.assertEqual(processador.detectar_tipo_midia("doc.pdf"), "documento")
            self.assertEqual(processador.detectar_tipo_midia("arquivo.xyz"), "desconhecido")
            
            print("‚úÖ Detec√ß√£o de tipos de m√≠dia funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")


class TestUtilitarios(unittest.TestCase):
    """
    üõ†Ô∏è Testes de Utilit√°rios
    
    Testa fun√ß√µes utilit√°rias e helpers do projeto.
    """
    
    def test_verificacao_dependencias(self):
        """Testa verifica√ß√£o de depend√™ncias"""
        try:
            from run_validai_enhanced import verificar_dependencias
            
            # Mock das depend√™ncias para teste
            with patch('importlib.import_module') as mock_import:
                mock_import.return_value = True
                resultado = verificar_dependencias()
                self.assertTrue(resultado)
            
            print("‚úÖ Verifica√ß√£o de depend√™ncias funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")
    
    def test_verificacao_estrutura(self):
        """Testa verifica√ß√£o de estrutura do projeto"""
        try:
            from run_validai_enhanced import verificar_estrutura_projeto
            
            # Mock da estrutura para teste
            with patch('os.path.exists') as mock_exists:
                mock_exists.return_value = True
                resultado = verificar_estrutura_projeto()
                self.assertTrue(resultado)
            
            print("‚úÖ Verifica√ß√£o de estrutura funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")


class TestCorrecoesCriticas(unittest.TestCase):
    """
    üîß Testes das Corre√ß√µes Cr√≠ticas
    
    Testa implementa√ß√µes de corre√ß√µes e valida√ß√µes robustas.
    """
    
    def test_validacao_configuracao_completa(self):
        """Testa valida√ß√£o completa de configura√ß√£o"""
        try:
            from correcoes_criticas import CorrecoesCriticas
            from validai_enhanced import GerenciadorConfig, ConfigValidAI
            
            # Criar configura√ß√£o de teste
            config = ConfigValidAI(
                project_id="test-project",
                temperatura=0.5,
                max_output_tokens=1000
            )
            
            gerenciador = GerenciadorConfig()
            gerenciador.config = config
            
            # Mock para evitar cria√ß√£o de diret√≥rios
            with patch('os.makedirs'):
                resultado = CorrecoesCriticas.implementar_validacao_configuracao_completa(gerenciador)
                self.assertTrue(resultado)
            
            print("‚úÖ Valida√ß√£o completa funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")
    
    def test_validacao_arquivos_robusta(self):
        """Testa valida√ß√£o robusta de arquivos"""
        try:
            from correcoes_criticas import CorrecoesCriticas
            from validai_enhanced import ValidadorArquivos, ConfigValidAI
            
            config = ConfigValidAI()
            validador = ValidadorArquivos(config)
            
            # Criar arquivos de teste
            arquivos_teste = [
                os.path.join(self.temp_dir, "test.pdf"),
                os.path.join(self.temp_dir, "test.py"),
                "arquivo_inexistente.txt"
            ]
            
            # Criar apenas alguns arquivos
            Path(arquivos_teste[0]).touch()
            Path(arquivos_teste[1]).touch()
            
            resultado = CorrecoesCriticas.implementar_validacao_arquivos_robusta(
                validador, arquivos_teste
            )
            
            self.assertIsInstance(resultado, dict)
            self.assertIn('arquivos_validos', resultado)
            self.assertIn('arquivos_invalidos', resultado)
            self.assertEqual(len(resultado['arquivos_validos']), 2)
            self.assertEqual(len(resultado['arquivos_invalidos']), 1)
            
            print("‚úÖ Valida√ß√£o robusta de arquivos funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")
    
    def setUp(self):
        """Configura√ß√£o para testes de corre√ß√µes"""
        self.temp_dir = tempfile.mkdtemp()
        
    def tearDown(self):
        """Limpeza para testes de corre√ß√µes"""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)


class TestIntegridade(unittest.TestCase):
    """
    üîç Testes de Integridade
    
    Testa verifica√ß√£o de integridade do c√≥digo.
    """
    
    def test_verificador_integridade(self):
        """Testa verificador de integridade b√°sico"""
        try:
            from verificar_integridade import VerificadorIntegridade
            
            verificador = VerificadorIntegridade(".")
            
            # Mock para evitar escaneamento real
            verificador.arquivos_python = ["test.py"]
            
            # Testar an√°lise b√°sica
            self.assertIsInstance(verificador.estatisticas, dict)
            self.assertIn('total_arquivos', verificador.estatisticas)
            
            print("‚úÖ Verificador de integridade funcionando")
            
        except ImportError as e:
            self.skipTest(f"M√≥dulo n√£o dispon√≠vel: {e}")


def executar_testes_offline():
    """
    üß™ Executa todos os testes offline
    
    Executa a su√≠te completa de testes que n√£o dependem
    de conex√µes externas ou APIs.
    """
    print("\n" + "="*70)
    print("üß™ SU√çTE DE TESTES OFFLINE - ValidAI Enhanced")
    print("="*70)
    print("\nExecutando testes que N√ÉO requerem acesso ao Vertex AI...\n")
    
    # Configurar test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # Adicionar classes de teste
    classes_teste = [
        TestConfiguracao,
        TestValidadorArquivos,
        TestFeedbackManager,
        TestRAGConfiguracao,
        TestProcessadorMultimodal,
        TestUtilitarios,
        TestCorrecoesCriticas,
        TestIntegridade
    ]
    
    for classe in classes_teste:
        tests = loader.loadTestsFromTestCase(classe)
        suite.addTests(tests)
    
    # Executar testes
    runner = unittest.TextTestRunner(verbosity=2, stream=sys.stdout)
    resultado = runner.run(suite)
    
    # Relat√≥rio final
    print("\n" + "="*70)
    print("üìä RELAT√ìRIO FINAL DOS TESTES")
    print("="*70)
    
    total_testes = resultado.testsRun
    sucessos = total_testes - len(resultado.failures) - len(resultado.errors) - len(resultado.skipped)
    
    print(f"üìà Total de testes executados: {total_testes}")
    print(f"‚úÖ Sucessos: {sucessos}")
    print(f"‚ùå Falhas: {len(resultado.failures)}")
    print(f"üí• Erros: {len(resultado.errors)}")
    print(f"‚è≠Ô∏è Pulados: {len(resultado.skipped)}")
    
    if resultado.failures:
        print(f"\n‚ùå FALHAS ENCONTRADAS:")
        for test, traceback in resultado.failures:
            print(f"   ‚Ä¢ {test}: {traceback.split('AssertionError:')[-1].strip()}")
    
    if resultado.errors:
        print(f"\nüí• ERROS ENCONTRADOS:")
        for test, traceback in resultado.errors:
            print(f"   ‚Ä¢ {test}: {traceback.split('Exception:')[-1].strip()}")
    
    # Status final
    if len(resultado.failures) == 0 and len(resultado.errors) == 0:
        print(f"\nüéâ TODOS OS TESTES PASSARAM!")
        print(f"‚úÖ Sistema ValidAI Enhanced est√° funcionando corretamente offline")
    else:
        print(f"\n‚ö†Ô∏è ALGUNS TESTES FALHARAM")
        print(f"üîß Verifique os problemas acima antes de prosseguir")
    
    print("="*70)
    
    return resultado.wasSuccessful()


def executar_testes_rapidos():
    """
    ‚ö° Executa apenas testes r√°pidos e essenciais
    
    Vers√£o reduzida para verifica√ß√£o r√°pida de funcionalidade.
    """
    print("\nüöÄ TESTES R√ÅPIDOS - ValidAI Enhanced")
    print("="*50)
    
    testes_rapidos = [
        ("Configura√ß√£o Padr√£o", TestConfiguracao('test_config_padrao')),
        ("Valida√ß√£o de Arquivos", TestValidadorArquivos('test_validacao_extensoes')),
        ("Feedback Manager", TestFeedbackManager('test_formatacao_mensagens')),
        ("RAG Config", TestRAGConfiguracao('test_corpus_config_basico'))
    ]
    
    sucessos = 0
    total = len(testes_rapidos)
    
    for nome, teste in testes_rapidos:
        try:
            resultado = unittest.TestResult()
            teste.run(resultado)
            
            if len(resultado.failures) == 0 and len(resultado.errors) == 0:
                print(f"‚úÖ {nome}")
                sucessos += 1
            else:
                print(f"‚ùå {nome}")
        except Exception as e:
            print(f"‚è≠Ô∏è {nome} (pulado: {e})")
    
    print(f"\nüìä Resultado: {sucessos}/{total} testes passaram")
    
    if sucessos == total:
        print("üéâ Sistema b√°sico funcionando!")
    else:
        print("‚ö†Ô∏è Alguns componentes precisam de aten√ß√£o")
    
    return sucessos == total


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="üß™ Testes Offline ValidAI Enhanced")
    parser.add_argument('--rapido', '-r', action='store_true', 
                       help='Executar apenas testes r√°pidos')
    parser.add_argument('--completo', '-c', action='store_true',
                       help='Executar su√≠te completa de testes')
    
    args = parser.parse_args()
    
    if args.rapido:
        sucesso = executar_testes_rapidos()
    else:
        sucesso = executar_testes_offline()
    
    sys.exit(0 if sucesso else 1)