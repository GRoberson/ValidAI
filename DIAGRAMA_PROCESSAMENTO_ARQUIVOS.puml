@startuml ValidAI Enhanced - Processamento de Arquivos

!theme cerulean-outline
title ValidAI Enhanced - Fluxos de Processamento por Tipo de Arquivo

actor Usuario as "üë§ Usu√°rio"
participant Interface as "üåê Interface"
participant ChatMultimodal as "ü§ñ Chat Multimodal"
participant SecurityValidator as "üîí Validador Seguran√ßa"
participant FileProcessor as "üìÅ Processador Arquivos"
participant DataManager as "üìÑ Data Manager"
participant Gemini as "üîÆ Gemini API"

== Upload e Valida√ß√£o Inicial ==

Usuario -> Interface: Upload arquivo(s)
Interface -> ChatMultimodal: message + files[]
ChatMultimodal -> SecurityValidator: validate_file_security(arquivo)

alt Arquivo v√°lido
    SecurityValidator --> ChatMultimodal: ‚úÖ Valida√ß√£o OK
else Arquivo inv√°lido  
    SecurityValidator --> ChatMultimodal: ‚ùå Erro de seguran√ßa
    ChatMultimodal --> Interface: Mensagem de erro
    Interface --> Usuario: "Arquivo rejeitado"
    return
end

== Processamento por Tipo de Arquivo ==

ChatMultimodal -> FileProcessor: Determinar tipo do arquivo

alt Arquivos de C√≥digo (.py, .sas, .ipynb)
    
    FileProcessor -> FileProcessor: process_code_file()
    
    alt Arquivo Python (.py)
        FileProcessor -> DataManager: convert_python()
        DataManager -> DataManager: Ler arquivo como texto
        DataManager --> FileProcessor: C√≥digo em string
        
    else Arquivo SAS (.sas)
        FileProcessor -> DataManager: converte_sas()
        DataManager -> DataManager: Processar sintaxe SAS
        DataManager --> FileProcessor: C√≥digo convertido
        
    else Jupyter Notebook (.ipynb)
        FileProcessor -> DataManager: convert_notebook_text()
        DataManager -> DataManager: Extrair c√©lulas de c√≥digo
        DataManager -> DataManager: Converter markdown
        DataManager --> FileProcessor: Notebook como texto
    end
    
    FileProcessor --> ChatMultimodal: codigo_extraido
    ChatMultimodal -> ChatMultimodal: Preparar prompt de an√°lise
    ChatMultimodal -> Gemini: Analisar c√≥digo + pergunta_usuario
    
else Documentos PDF (.pdf)
    
    FileProcessor -> FileProcessor: process_pdf_file()
    FileProcessor -> DataManager: converte_pdf()
    DataManager -> DataManager: Extrair texto do PDF
    DataManager -> DataManager: Preservar formata√ß√£o
    DataManager --> FileProcessor: Texto do documento
    FileProcessor --> ChatMultimodal: conteudo_pdf
    ChatMultimodal -> Gemini: Documento + prompt_analise
    
else Imagens (.png, .jpg, .jpeg)
    
    FileProcessor -> FileProcessor: process_image_file()
    FileProcessor -> DataManager: convert_png_to_base64()
    DataManager -> DataManager: Converter imagem para base64
    DataManager --> FileProcessor: Imagem codificada
    FileProcessor --> ChatMultimodal: imagem_base64
    ChatMultimodal -> Gemini: Imagem + "Descreva o conte√∫do"
    
else Arquivos Excel (.xlsx)
    
    FileProcessor -> FileProcessor: process_excel_file()
    FileProcessor -> DataManager: get_abas()
    DataManager -> DataManager: Listar worksheets
    DataManager --> FileProcessor: lista_abas[]
    
    alt M√∫ltiplas abas
        FileProcessor --> ChatMultimodal: Solicitar sele√ß√£o de aba
        ChatMultimodal --> Interface: "Qual aba importar?"
        Interface --> Usuario: Lista de abas dispon√≠veis
        Usuario -> Interface: Sele√ß√£o da aba
        Interface -> ChatMultimodal: aba_selecionada
        
        ChatMultimodal -> FileProcessor: process_excel_sheet(arquivo, aba)
        FileProcessor -> DataManager: convert_excel(arquivo, aba)
        DataManager -> DataManager: Converter aba para texto
        DataManager --> FileProcessor: dados_tabulares
        
    else Uma aba apenas
        FileProcessor -> DataManager: convert_excel(arquivo, aba[0])
        DataManager --> FileProcessor: dados_tabulares
    end
    
    FileProcessor --> ChatMultimodal: tabela_processada
    ChatMultimodal -> Gemini: Dados + prompt_analise
    
else Arquivos CSV (.csv)
    
    FileProcessor -> FileProcessor: process_csv_file()
    FileProcessor -> DataManager: convert_csv()
    DataManager -> DataManager: Ler CSV e formatar
    DataManager --> FileProcessor: dados_csv
    FileProcessor --> ChatMultimodal: tabela_csv
    ChatMultimodal -> Gemini: CSV + prompt_analise
    
else Arquivos de Texto (.txt)
    
    FileProcessor -> FileProcessor: process_text_file()
    FileProcessor -> DataManager: convert_python()
    DataManager -> DataManager: Ler como texto simples
    DataManager --> FileProcessor: conteudo_texto
    FileProcessor --> ChatMultimodal: texto_extraido
    ChatMultimodal -> Gemini: Texto + pergunta_usuario
    
else V√≠deos (.mp4)
    
    FileProcessor -> FileProcessor: process_video_file()
    FileProcessor -> DataManager: converte_video()
    DataManager -> DataManager: Extrair frames/√°udio
    DataManager --> FileProcessor: video_processado
    FileProcessor --> ChatMultimodal: video_base64
    ChatMultimodal -> Gemini: V√≠deo + prompt_analise
    
else Tipo n√£o suportado
    
    FileProcessor --> ChatMultimodal: "Arquivo n√£o suportado"
    ChatMultimodal --> Interface: Mensagem de erro
    Interface --> Usuario: "Tipo de arquivo n√£o permitido"
    return
    
end

== Processamento da Resposta ==

activate Gemini
Gemini -> Gemini: Processar com modelo configurado
Gemini -> Gemini: Aplicar system instruction
Gemini -> Gemini: Usar configura√ß√µes (temperatura, tokens)
Gemini --> ChatMultimodal: Stream de resposta
deactivate Gemini

ChatMultimodal -> ChatMultimodal: Processar chunks em tempo real
loop Para cada chunk
    ChatMultimodal -> Interface: chunk_texto (com delay configur√°vel)
    Interface -> Usuario: Exibir texto gradualmente
end

ChatMultimodal -> ChatMultimodal: Adicionar resposta ao contexto
ChatMultimodal --> Interface: Resposta completa
Interface --> Usuario: Conversa atualizada

== M√∫ltiplos Arquivos ==

note over Usuario, Gemini
  **Para m√∫ltiplos arquivos (at√© 10):**
  ‚Ä¢ Processar cada arquivo sequencialmente
  ‚Ä¢ Concatenar c√≥digos com identificadores
  ‚Ä¢ Aplicar limite de tamanho total
  ‚Ä¢ Usar prompt espec√≠fico para m√∫ltiplos arquivos
end note

alt M√∫ltiplos arquivos de c√≥digo
    loop Para cada arquivo (max 10)
        ChatMultimodal -> FileProcessor: process_code_file(arquivo[i])
        FileProcessor --> ChatMultimodal: codigo_i
        ChatMultimodal -> ChatMultimodal: Concatenar c√≥digos
    end
    ChatMultimodal -> Gemini: "Analise os c√≥digos fornecidos"
    
else Arquivo muito grande
    ChatMultimodal --> Interface: "Arquivo excede limite de 50MB"
    
else Muitos arquivos
    ChatMultimodal --> Interface: "M√°ximo 10 arquivos simult√¢neos"
end

@enduml